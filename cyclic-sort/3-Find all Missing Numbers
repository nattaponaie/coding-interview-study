Problem Statement#
We are given an unsorted array containing numbers taken from the range 1 to ‘n’. The array can have duplicates, which means some numbers will be missing. Find all those missing numbers.

Example 1:
Input: [2, 3, 1, 8, 2, 3, 5, 1]
Output: 4, 6, 7
Explanation: The array should have all numbers from 1 to 8, due to duplicates 4, 6, and 7 are missing.

Example 2:
Input: [2, 4, 1, 2]
Output: 3

Example 3:
Input: [2, 3, 2, 1]
Output: 4

[2, 4, 1, 2] i = 0
[4, 2, 1, 2] i = 0
[4, 2, 1, 2] i = 0
	[2, 2, 1, 4] i = 0
[2, 2, 1, 4] i = 0
	[2, 2, 1, 4] i = 1
[2, 2, 1, 4] i = 1
	[2, 2, 1, 4] i = 2
[2, 2, 1, 4] i = 2
	[1, 2, 2, 4] i = 2

let i = 0;

while (i < nums.length) {
	const itsPositionIdx = nums[i] - 1;

	if (nums[i] !== nums[itsPositionIdx]) {
		[nums[i], nums[itsPositionIdx]] = [nums[itsPositionIdx], nums[i]];
		continue;
    }
    i += 1;
}

const missingNumber = [];
for (i = 0; i < nums.length; i++) {
	const correctNum = i + 1;
	if (nums[i] !== correctNum) {
        missingNumber.push(correctNum);
    }
}

