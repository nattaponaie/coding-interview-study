Given an array of positive numbers and a positive number ‘S,’ 
find the length of the smallest contiguous subarray whose sum is greater than or equal to ‘S’. Return 0 if no such subarray exists.

Input: [2, 1, 5, 2, 3, 2], S=7 
Output: 2
Explanation: The smallest subarray with a sum greater than or equal to '7' is [5, 2].

Input: [2, 1, 5, 2, 8], S=7
Output: 1
Explanation: The smallest subarray with a sum greater than or equal to '7' is [8].

let windowSum = 0,
minLength = Infinity,
windowStart = 0;

for (windowEnd = 0; windowEnd < arr.length; windowEnd++) {
    windowSum += arr[windowEnd]; // add the next element

    // shrink the window as small as possible until the 'window_sum' is smaller than 's'
    while (windowSum >= s) {
        minLength = Math.min(minLength, windowEnd - windowStart + 1);
        windowSum -= arr[windowStart];
        windowStart += 1;
    }
}

if (minLength === Infinity) {
    return 0;
}
return minLength;

// 1 windowSum = 0, minLength = Infinity, windowStart = 0; windowEnd = 0
    // 1 windowSum = 2, minLength = Infinity, windowStart = 0; windowEnd = 1
// 2 windowSum = 2, minLength = Infinity, windowStart = 0; windowEnd = 1
    // 2 windowSum = 3, minLength = Infinity, windowStart = 0; windowEnd = 2
// 3 windowSum = 3, minLength = Infinity, windowStart = 0; windowEnd = 2
    // 3 windowSum = 8, minLength = Infinity, windowStart = 0; windowEnd = 2
    // 3 windowSum = 6, minLength = 3, windowStart = 1; windowEnd = 3
// 4 windowSum = 6, minLength = 3, windowStart = 1; windowEnd = 3
    // 4 windowSum = 8, minLength = 3, windowStart = 1; windowEnd = 3
    // 4 windowSum = 7, minLength = 3, windowStart = 2; windowEnd = 3
    // 4 windowSum = 2, minLength = 2, windowStart = 3; windowEnd = 4
// 5 windowSum = 2, minLength = 2, windowStart = 3; windowEnd = 4
    // 5 windowSum = 10, minLength = 2, windowStart = 3; windowEnd = 4
    // 5 windowSum = 8, minLength = 2, windowStart = 4; windowEnd = 4
    // 5 windowSum = 0, minLength = 1, windowStart = 5; windowEnd = 4