const queue = [root];
let currentLevel = 0;

while (queue.length > 0) {
	const currentQueueLength = queue.length;
	currentLevel += 1;
	for (let i = 0; i < currentQueueLength; i++) {
		const currentNode = queue.shift();

		if (currentNode.left === null && currentNode.right === null) return currentLevel;

		if (currentNode.left !== null) {
            queue.push(currentNode.left);
        }
        if (currentNode.right !== null) {
            queue.push(currentNode.right);
        }
    }
}

return -1;

Time complexity: O(N) where N is a number of all nodes
Space complexity: O(N) where N is a number of nodes in each level

#1 queue = [12], currentLevel = 0, currentNode = null
#1 queue = [12], currentLevel = 1, currentNode = null
#1 queue = [7,1], currentLevel = 1, currentNode = 12
#2 queue = [7,1], currentLevel = 1, currentNode = null
	#2 queue = [7,1], currentLevel = 2, currentNode = null
	#2 queue = [1,9], currentLevel = 2, currentNode = 7
	#2 queue = [9,10,5], currentLevel = 2, currentNode = 1
#3 queue = [9,10,5], currentLevel = 2, currentNode = null
	#3 queue = [10,5], currentLevel = 3, currentNode = 9
