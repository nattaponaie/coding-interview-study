Given a sorted array, create a new array containing squares of all the numbers of the input array in the sorted order.

Example 1:
Input: [-2, -1, 0, 2, 3]
Output: [0, 1, 4, 4, 9]

Example 2:
Input: [-3, -1, 0, 1, 2]
Output: [0, 1, 1, 4, 9]


Use two pointer technique
Set left idx at 0
Set right idx at the max of input length
Set max square index at the max of input length
Declare result as input length with all 0 value

While left < right
	square number of left idx
	square number of right idx

	If left square result > right square result
		result[maxSquareIdx] = left square result
		Left += 1;
	Else
		result[maxSquareIdx] = right square result
		Right -= 1

	maxSquareIdx -= 1
		
—---

Time complexity: O(n)
Space complexity: O(n)


—---






let leftIdx = 0;
let rightIdx = arr.length - 1;
let maxSquareidx = arr.length - 1;
const result = Array(arr.length).fill(0);

while (leftIdx < rightIdx) {
	const leftSquareResult = arr[leftIdx] * arr[leftIdx];
	const rightSquareResult = arr[rightIdx] * arr[rightIdx];

	if (leftSquareResult > rightSquareResult) {
		result[maxSquareIdx] = leftSquareResult;
	left += 1;
} else {
	result[maxSquareIdx] = rightSquareResult;
	right -= 1;
}

maxSquareIdx -= 1;
}

return result;

—--------

# Dry run

Input: [-3, -1, 0, 1, 2]
Output: [0, 1, 1, 4, 9]

#1 leftIdx = 0, rightIdx = 4, maxSquareIdx = 4, result = [0, 0, 0, 0, 0]
	#1 leftIdx = 1, rightIdx = 4, maxSquareIdx = 4, result = [0, 0, 0, 0, 9]
	#1 leftIdx = 1, rightIdx = 4, maxSquareIdx = 3, result = [0, 0, 0, 0, 9]
#2 leftIdx = 1, rightIdx = 4, maxSquareIdx = 3, result = [0, 0, 0, 0, 9]
	#2 leftIdx = 1, rightIdx = 3, maxSquareIdx = 3, result = [0, 0, 0, 4, 9]
	#2 leftIdx = 1, rightIdx = 3, maxSquareIdx = 2, result = [0, 0, 0, 4, 9]
#3 leftIdx = 1, rightIdx = 3, maxSquareIdx = 2, result = [0, 0, 0, 4, 9]
	#3 leftIdx = 1, rightIdx = 2, maxSquareIdx = 2, result = [0, 0, 1, 4, 9]
	#3 leftIdx = 1, rightIdx = 2, maxSquareIdx = 1, result = [0, 0, 1, 4, 9]
#4 leftIdx = 1, rightIdx = 2, maxSquareIdx = 1, result = [0, 0, 1, 4, 9]
	#4 leftIdx = 2, rightIdx = 2, maxSquareIdx = 1, result = [0, 1, 1, 4, 9]
	#4 leftIdx = 2, rightIdx = 2, maxSquareIdx = 0, result = [0, 1, 1, 4, 9]
#5 leftIdx = 2, rightIdx = 2, maxSquareIdx = 0, result = [0, 1, 1, 4, 9]




