Problem Statement #
Given an array of unsorted numbers, find all unique triplets in it that add up to zero.

Example 1:
Input: [-3, 0, 1, 2, -1, 1, -2]
Output: [[-3, 1, 2], [-2, 0, 2], [-2, 1, 1], [-1, 0, 1]]
Explanation: There are four unique triplets whose sum is equal to zero.

Example 2:
Input: [-5, 2, -1, -2, 3]
Output: [[-5, 2, 3], [-2, -1, 3]]
Explanation: There are two unique triplets whose sum is equal to zero.

#1 Approach

declare twoPair = {}
const result = [];

iterate through input array
	iterate through input array starting at i + 1
	add a pair of {input[i], input[j]} to twoPair

end iteration

iterate through input array
	iterate through twoPair
		sum twoPair element with array[i]
		if sum equal to zero
			add triplet to result array

# Analysis
Time complexity 
	1st loop -> O(N log N)
	2nd loop -> O(N * N^2) where N^2 is the total pair number in input array
	total -> O(N log N + N * N^2) -> O(N * N^2)

Space complexity O(N^2)


—--------





#2 Approach

Example 1:
Input: [-3, 0, 1, 2, -1, 1, -2]
Output: [[-3, 1, 2], [-2, 0, 2], [-2, 1, 1], [-1, 0, 1]]
Target: 0

1# iteration find X
X + Y + Z = 0
Y + Z = -X

[-3,-2,-1,0,1,1,2]

pLeft = 0
pRight = 6

[[-3,2,1]]
—


sort input array

iterate through sortedInput array as i
	set -X as -sortedInput[i] as targetX
	
iterate through sortedInput array starting at i + 1 using two pointers
	calculate sum of Y+Z as sortedInput[pLeft] + sortedInput[pRight]
	if sum of Y+Z equal to targetX
		add [targetX, sortedInput[pLeft], sortedInput[pRight]] to triplets
		
		while (pLeft < pRight && sortedInput[pLeft] === sortedInput[pLeft + 1])
			pLeft += 1;
		while (pLeft < pRight && sortedInput[pRight] === sortedInput[pRight -1])
			pRight -= 1;

		pLeft += 1
		pRight -= 1
	else if sum of Y+Z less than targetX
		pLeft += 1
	else
		pRight -= 1


—-
arr.sort((a,b) => a-b)

const triplets = [];

for (let i = 0; i < arr.length; i++) {
	targetX = -arr[i]
	findPairOfSum(targetX, i+1);
}

function findPairOfSum(targetSum, startingIdx) {
	let pLeft = startingIdx;
	let pRight = arr.length-1;

	while(pLeft < pRight) {
	const currentSum = arr[pLeft] + arr[pRight]
	if (currentSum === targetSum) {
		triplets.push([-targetSum, arr[pLeft], arr[pRight]]);
		
		while (pLeft < pRight && arr[pLeft] === arr[pLeft + 1]) {
			pLeft += 1;
		}
		while (pLeft < pRight && arr[pRight] === arr[pRight -1]) {
			pRight -= 1;
		}

		pLeft += 1;
		pRight -= 1;
} else if (currentSum < targetSum) {
	pLeft += 1;
} else {
	pRight -= 1;
}

}
}

return triplets;
