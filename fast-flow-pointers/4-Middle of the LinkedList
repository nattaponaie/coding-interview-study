Problem Statement#
Given the head of a Singly LinkedList, write a method to return the middle node of the LinkedList.

If the total number of nodes in the LinkedList is even, return the second middle node.

Example 1:
Input: 1 -> 2 -> 3 -> 4 -> 5 -> null
Output: 3

Example 2:
Input: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null
Output: 4

Example 3:
Input: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> null
Output: 4


# 1 Approach

declare slowPointerNode as head
declare fastPointerNode as head

start iteration while fastPointerNode is not null & next fastPointerNode is not null
	set slowPointerNode to next node
	set fastPointerNode to next 2 node

end iteration

return slowPointerNode


—--

Time complexity: O(N)
Space complexity: O(1)


let slowPointerNode = head;
let fastPointerNode = head;

while (fastPointerNode !== null && fastPointerNode.next !== null) {
	slowPointerNode = slowPointerNode.next;
	fastPointerNode = fastPointerNode.next.next
}

return slowPointerNode;

—---

Input: 1 -> 2 -> 3 -> 4 -> 5 -> null
Output: 3

# 1 slowPointerNode = 1, fastPointerNode = 1, linkedListLength = 1
	# 1 slowPointerNode = 2, fastPointerNode = 3, linkedListLength = 3
# 2 slowPointerNode = 2, fastPointerNode = 3, linkedListLength = 3
	# 2 slowPointerNode = 3, fastPointerNode = 5, linkedListLength = 5
# 3 slowPointerNode = 3, fastPointerNode = 5, linkedListLength = 5

Example 2:
Input: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null
Output: 4

# 1 slowPointerNode = 1, fastPointerNode = 1, linkedListLength = 1
	# 1 slowPointerNode = 2, fastPointerNode = 3, linkedListLength = 3
# 2 slowPointerNode = 2, fastPointerNode = 3, linkedListLength = 3
	# 2 slowPointerNode = 3, fastPointerNode = 5, linkedListLength = 5
# 3 slowPointerNode = 3, fastPointerNode = 5, linkedListLength = 5
	# 3 slowPointerNode = 4, fastPointerNode = null, linkedListLength = 6
