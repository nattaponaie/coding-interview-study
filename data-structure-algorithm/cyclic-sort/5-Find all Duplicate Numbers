Problem Statement#
We are given an unsorted array containing n numbers taken from the range 1 to n. The array has some numbers appearing twice, find all these duplicate numbers using constant space.

Example 1:
Input: [3, 4, 4, 5, 5]
Output: [4, 5]

Example 2:
Input: [5, 4, 7, 2, 3, 5, 3]
Output: [3, 5]

[3, 4, 4, 5, 5] i = 0
[4, 4, 3, 5, 5] i = 0
[5, 4, 3, 4, 5] i = 0
[5, 4, 3, 4, 5] i = 1, result = [5]
[5, 4, 3, 4, 5] i = 2, result = [5, 4]
[5, 4, 3, 4, 5] i = 3, result = [5, 4]
[5, 4, 3, 4, 5] i = 4, result = [5, 4]
[5, 4, 3, 4, 5] i = 5, result = [5, 4]

[5, 4, 7, 2, 3, 5, 3] i = 0
[3, 4, 7, 2, 5, 5, 3] i = 0
[7, 4, 3, 2, 5, 5, 3] i = 0
[3, 4, 3, 2, 5, 5, 7] i = 0
[3, 4, 3, 2, 5, 5, 7] i = 1, result = [3]
[3, 2, 3, 4, 5, 5, 7] i = 1, result = [3]
[3, 2, 3, 4, 5, 5, 7] i = 2, result = [3]
[3, 2, 3, 4, 5, 5, 7] i = 3, result = [3]
[3, 2, 3, 4, 5, 5, 7] i = 4, result = [3]
[3, 2, 3, 4, 5, 5, 7] i = 5, result = [3]
[3, 2, 3, 4, 5, 5, 7] i = 6, result = [3, 5]
[3, 2, 3, 4, 5, 5, 7] i = 7, result = [3, 5]

# 1 Approach
Time complexity: O(N)
Space complexity: O(1) by ignoring the result array

let i = 0;
const duplicateNumbers = [];
while (i < nums.length) {
	const itsPositionIdx = nums[i] - 1;
	if (nums[i] !== nums[itsPositionIdx]) {
	[nums[i], nums[itsPositionIdx]] = [nums[itsPositionIdx], nums[i]];
} else {
	if (i !== itsPositionIdx) duplicateNumbers.push(nums[i]);
	i += 1;
}
}

duplicateNumbers.sort((a,b) => a-b);
return duplicateNumbers;
