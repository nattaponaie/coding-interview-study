const queue = [root];

while (queue.length > 0) {
	const currentQueueLength = queue.length;
	for (let i = 0; i < currentQueueLength; i++) {
		const currentNode = queue.shift();
		
		if (currentNode.left !== null) queue.push(currentNode.left)
		if (currentNode.right !== null) queue.push(currentNode.right)

		if (currentNode.val === key) {
			if (queue.length > 0) return queue[0]
                break;
        }
    }
}

return null;

Time complexity: O(N) where N is the number of nodes in binary tree
Space complexity: O(N) where N is the number of nodes in each level

#1 queue = [12], currentNode = null
	#1 queue = [], currentNode = 12
	#1 queue = [7,1], currentNode = 12


â€”

#1 queue = [12], currentNode = null
	#1 queue = [], currentNode = 12
	#1 queue = [7,1], currentNode = 12
#2 queue = [7,1], currentNode = null
	#2 queue = [1,9], currentNode = 7
	#2 queue = [9,10,5], currentNode = 1
#3 queue = [9,10,5], currentNode = null
	#3 queue = [10,5], currentNode = 9
