Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:
1 <= nums.length <= 2500
-104 <= nums[i] <= 104

/**
 * @param {number[]} nums
 * @return {number}
 */

// DP O(N^2) time, O(1) space
// var lengthOfLIS = function(nums) {
//     const LIS = Array(nums.length).fill(0);
//     LIS[nums.length - 1] = 1;
//     let maxLIS = 0;
    
//     for (let idx = nums.length - 1; idx >= 0; idx--) {
//         const num = nums[idx];
        
//         let currentLongest = -1;
//         for (let remainingIdx = idx + 1; remainingIdx < nums.length; remainingIdx++) {
//             const compareNum = nums[remainingIdx];
//             if (num < compareNum) {
//                 currentLongest = Math.max(currentLongest, 1 + LIS[remainingIdx]);
//             }
//         }
//         LIS[idx] = Math.max(1, currentLongest)
//         maxLIS = Math.max(maxLIS, LIS[idx])
//     }
    
//     return maxLIS;
// };

// O(N*logN) time, O(1) space
var lengthOfLIS = function(nums) {
    const binarySearch = (array, targetNum) => {
        let left = 0, right = array.length - 1;
        
        while (left <= right) {
            const middleIdx = Math.floor((left + right) / 2);
            const middleNum = array[middleIdx]
            
            if (middleNum === targetNum) return middleIdx;
            else if (middleNum <= targetNum) {
                left = middleIdx + 1
            } else right = middleIdx - 1;
            
        }
        
        return left
    }
    
    const sub = [nums[0]];
    for (let idx = 1; idx < nums.length; idx++) {
        const currentNum = nums[idx];
        const prevNum = sub[sub.length - 1]
        if (currentNum === prevNum) continue
        else if (currentNum > prevNum) sub.push(currentNum)
        else {
            const replaceIdx = binarySearch(sub, currentNum)
            sub[replaceIdx] = currentNum
        }
    }
    
    return sub.length
}