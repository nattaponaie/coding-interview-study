You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.

A pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.

Return the length longest chain which can be formed.

You do not need to use up all the given intervals. You can select pairs in any order.


Example 1:
Input: pairs = [[1,2],[2,3],[3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4].

Example 2:
Input: pairs = [[1,2],[7,8],[4,5]]
Output: 3
Explanation: The longest chain is [1,2] -> [4,5] -> [7,8].
 

Constraints:
n == pairs.length
1 <= n <= 1000
-1000 <= lefti < righti <= 1000

/**
 * @param {number[][]} pairs
 * @return {number}
 */
// var findLongestChain = function(pairs) {
//     if (pairs.length === 0) return 0;
//     if (pairs.length === 1) return 1;
    
//     pairs.sort((a,b) => a[0] - b[0]);
    
//     const LIS = Array(pairs.length).fill(1);
//     let max = 1;
    
//     for (let idx = 1; idx < pairs.length; idx++) {
//         const p1 = pairs[idx]
        
//         for (let remainingIdx = 0; remainingIdx < idx; remainingIdx++) {
//             const p2 = pairs[remainingIdx];
//             if (p2[1] < p1[0]) {
//                 LIS[idx] = Math.max(LIS[idx], 1 + LIS[remainingIdx]);
//                 max = Math.max(max, LIS[idx])
//             }
//         }
//     }
    
//     return max;
// };

// Time complexity: O(N^2)
// Space complexity: O(N)

var findLongestChain = function(pairs) {
    pairs.sort((a,b) => a[1] - b[1]);
    
    let prevValue = -Infinity, count = 0;
    for (let idx = 0; idx < pairs.length; idx++) {
        const pair = pairs[idx]
        if (prevValue < pair[0]) {
            prevValue = pair[1]
            count += 1;
        }
    }
    
    return count;
}

// Time complexity: O(N*logN)
// Space complexity: O(N)