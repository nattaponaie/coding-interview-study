Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.

Example 1:
Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].

Example 2:
Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.

Constraints:
1 <= nums.length <= 2000
-106 <= nums[i] <= 106

/**
 * @param {number[]} nums
 * @return {number}
 */
var findNumberOfLIS = function(nums) {
    const n = nums.length;
    const LIS = Array(n).fill(1);
    const count = Array(n).fill(1);
    
    for (let idx = n-1; idx >= 0; idx--) {
        const num = nums[idx];
        for (let rightIdx = idx + 1; rightIdx < n; rightIdx++) {
            const rightNum = nums[rightIdx];
            if (num < rightNum) {
                if (LIS[idx] < 1 + LIS[rightIdx]) {
                    count[idx] = count[rightIdx]
                } else if (LIS[idx] === 1 + LIS[rightIdx]) count[idx] += count[rightIdx]
                
                LIS[idx] = Math.max(LIS[idx], 1 + LIS[rightIdx]);
            }
        }
    }
    
    let maxLIS = 0, countLIS = 0;
    for (let idx = 0; idx < n; idx++) {
        const currentLIS = LIS[idx];
        const currentCount = count[idx]
        
        if (currentLIS > maxLIS) {
            maxLIS = currentLIS
            countLIS =  currentCount;
        } else if (currentLIS === maxLIS) countLIS += currentCount;
    }
    
    return countLIS;
};

Time complexity: O(N^2)
Space complexity: O(N)