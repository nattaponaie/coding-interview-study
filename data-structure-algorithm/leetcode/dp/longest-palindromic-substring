Given a string s, return the longest palindromic substring in s.

Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"

Constraints:
1 <= s.length <= 1000
s consist of only digits and English letters.


/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function(s) {
    if (s.length === 1) return s[0]
    
    let currentStartIdx = -1, currentEndIdx = -1;
    let currentLength = -1;
    for (let idx = 0; idx < s.length; idx++) {
        let left = idx, right = idx;
        while (left >= 0 && right < s.length && s[left] === s[right]) {
            if (right - left + 1 > currentLength) {
                currentStartIdx = left
                currentEndIdx = right
                
                currentLength = right - left + 1
            }
            left -= 1;
            right += 1;
        }
        
        left = idx
        right = idx+1;
        while (left >= 0 && right < s.length && s[left] === s[right]) {
            if (right - left + 1 > currentLength) {
                currentStartIdx = left
                currentEndIdx = right
                
                currentLength = right - left + 1
            }
            left -= 1;
            right += 1;
        }
    }
    
    return s.substring(currentStartIdx, currentEndIdx + 1)
};

Time complexity : O(n^2) Since expanding a palindrome around its center could take O(n) time, the overall complexity is O(n^2).
Space complexity : O(1).