You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

Example 1:
Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

Example 2:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 3:
Input: nums = [1,2,3]
Output: 3
 

Constraints:
1 <= nums.length <= 100
0 <= nums[i] <= 1000

/**
 * @param {number[]} nums
 * @return {number}
 */
// TopDown O(2^N) time, O(N) space
// var rob = function(nums) {
//     const houseLength = nums.length;
//     if (houseLength === 1) return nums[0]
//     if (houseLength === 2) return Math.max(nums[houseLength-1], nums[houseLength-2])
    
	
// 	const dfs = (ith, skipLast) => {
//         if (ith < 0) {
//             return 0;
//         }
        
//         if (skipLast && ith === houseLength - 1) {
//             return dfs(ith-1, skipLast);
//         } else if (!skipLast && ith === 0) {
//             return 0;
//         }
        
//         return Math.max(dfs(ith-2, skipLast) + nums[ith], dfs(ith-1, skipLast))
//     }

//     return Math.max(dfs(houseLength-1, true), dfs(houseLength-1, false));
// };

// TopDown with memoization O(2^N) time, O(N) space
// var rob = function(nums) {
//     const houseLength = nums.length;
//     if (houseLength === 1) return nums[0]
//     if (houseLength === 2) return Math.max(nums[houseLength-1], nums[houseLength-2])
//     const dp1 = Array(nums.length).fill(-1)
//     const dp2 = Array(nums.length).fill(-1)
    
	
// 	const dfs = (ith, skipLast) => {
//         if (ith < 0) {
//             return 0;
//         }
        
//         if (skipLast && ith === houseLength - 1) {
//             return dfs(ith-1, skipLast);
//         } else if (!skipLast && ith === 0) {
//             return 0;
//         }
        
//         if (skipLast && dp1[ith] > 0) return dp1[ith]
//         if (!skipLast && dp2[ith] > 0) return dp2[ith]
        
//         if (skipLast) dp1[ith] = Math.max(dfs(ith-2, skipLast) + nums[ith], dfs(ith-1, skipLast))
//         if (!skipLast) dp2[ith] = Math.max(dfs(ith-2, skipLast) + nums[ith], dfs(ith-1, skipLast))
        
//         return skipLast ? dp1[ith] : dp2[ith]
//     }

//     dfs(houseLength-1, true)
//     dfs(houseLength-1, false)
    
//     const maxFromDp1 = Math.max(dp1[houseLength-1], dp1[houseLength-2])
//     const maxFromDp2 = Math.max(dp2[houseLength-1], dp2[houseLength-2])
//     return Math.max(maxFromDp1, maxFromDp2)
// };

// BottomUp O(N) time & O(1) space
var rob = function(nums) {
    if (nums.length === 0) return 0
    if (nums.length === 1) return nums[0]
    
    const helper = (houses) => {
        let morePrevRobbed = 0, prevRobbed = 0
        
        for (const num of houses) {
            const newMoney = Math.max(morePrevRobbed + num, prevRobbed);
            morePrevRobbed = prevRobbed
            prevRobbed = newMoney
        }
        
        return prevRobbed
    }
    
    const maxMoneySkipFirst = helper(nums.slice(1, nums.length))
    const maxMoneySkipLast = helper(nums.slice(0, nums.length - 1))
    return Math.max(maxMoneySkipFirst, maxMoneySkipLast)
}