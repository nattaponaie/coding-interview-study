Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

Example 1:
Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.

Example 2:
Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:
1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var largestDivisibleSubset = function(nums) {
    nums.sort((a,b) => a - b);
    const LIS = Array(nums.length).fill(1);
    let maxIdx = 0;
    const child = Array(nums.length).fill(-1)
    
    for (let idx = 1; idx < nums.length; idx++) {
        const currentNum = nums[idx];
        
        for (let remainingIdx = 0; remainingIdx < idx; remainingIdx++) {
            const prevNum = nums[remainingIdx];
            if (currentNum % prevNum === 0 && LIS[remainingIdx] + 1 > LIS[idx]) {
                LIS[idx] = LIS[remainingIdx] + 1
                child[idx] = remainingIdx;
            }
        }
        
        if(LIS[idx] > LIS[maxIdx]) {
            maxIdx = idx;
        }
    }
    
    const result = [];
    while (maxIdx !== -1) {
        result.push(nums[maxIdx])
        maxIdx = child[maxIdx]
    }
    
    return result;
};

Time complexity: O(N^2)
Space complexity: O(N)