Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:
Input: strs = [""]
Output: [[""]]

Example 3:
Input: strs = ["a"]
Output: [["a"]]
 

Constraints:
1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

/**
 * @param {string[]} strs
 * @return {string[][]}
 */

const dictionary = {
	"a": 0,
    "b": 1,
    "c": 2,
    "d": 3,
    "e": 4,
    "f": 5,
    "g": 6,
    "h": 7,
    "i": 8,
    "j": 9,
    "k": 10,
    "l": 11,
    "m": 12,
    "n": 13,
    "o": 14,
    "p": 15,
    "q": 16,
    "r": 17,
    "s": 18,
    "t": 19,
    "u": 20,
    "v": 21,
    "w": 22,
    "x": 23,
    "y": 24,
    "z": 25,
}

var groupAnagrams = function(strs) {
	const result = {};
    for (const str of strs) {
        const currentDict = Array(26).fill(0);
        for (const char of str) {
            currentDict[dictionary[char]] += 1;
        }
        const currentDictString = currentDict.toString();
        if (!(currentDictString in result)) {
            result[currentDictString] = []
        }
        result[currentDictString].push(str)
    }	
    return Object.values(result);
};

// Time complexity: O(M*N) where M is the total str in the array and N is total number of English characters
// Space complexity: O(U*M) if we count the result Hashmap for storing each unique anagram