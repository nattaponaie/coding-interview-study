Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
 

Constraints:
n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.


var missingNumber = function(nums) {
	let currentIndex = 0;
	while (currentIndex < nums.length) {
		const currentNum = nums[currentIndex];
		const expectNum = currentIndex;
		if (currentNum !== expectNum) {
			if (currentNum > nums.length - 1) {
				currentIndex += 1;
                continue;
            }
            const swapIndex = currentNum;
            [nums[currentIndex], nums[swapIndex]] = [nums[swapIndex], nums[currentIndex]];
        } else {
            currentIndex += 1;
        }
    }

    for (let i = 0; i < nums.length; i++) {
        if (nums[i] !== i) return i;
    }
    return nums.length
};


Time complexity: Firstly, we iterate through N numbers of nums and swap the element to make it sorted. This first loop will take O(N) time. Secondly, we loop again through N numbers of nums and check for the missing number. This second loop also takes O(N). 
Therefore, the time complexity for this code will be asymptotically equivalent to O(N).

Space complexity: No extra space usage, so it will be constant time O(1)
