Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.
 
Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Constraints:
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9

function longestConsecutive(nums) {
	const set = new Set(nums);
	let longestCount = 0;

	for (const num of set) {
		let currentNum = num;
		if (set.has(currentNum - 1)) continue;

		let currentConsecutive = 1;
		while (set.has(currentNum + 1)) {
            currentConsecutive += 1;
            currentNum += 1;
        }

        longestCount = Math.max(longestCount, currentConsecutive);
    }
    return longestCount;
}

nums = [-100,-99,1,5]
#1 set = [-100,-99,1,5], longestCount = 0, currentNum = -100
#1 set = [-100,-99,1,5], longestCount = 0, currentNum = -100, currentConsecutive = 1
#1 set = [-100,-99,1,5], longestCount = 0, currentNum = -99, currentConsecutive = 2
#1 set = [-100,-99,1,5], longestCount = 2, currentNum = -99, currentConsecutive = 2

Time complexity: Firstly, inserting all elements in the nums to Set will take O(N) time. 
Secondly, iterating through the Set and has an inner loop which checks for currentNum + 1. 
The worst case is that each number could possibly be visited only twice O(2N) which will be asymptotically equivalent to O(N).

Space complexity: Storing all element from nums array which takes O(N)
