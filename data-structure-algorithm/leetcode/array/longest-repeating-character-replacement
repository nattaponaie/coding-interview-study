You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.


Example 1:
Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.

Example 2:
Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
 

Constraints:
1 <= s.length <= 105
s consists of only uppercase English letters.
0 <= k <= s.length


var characterReplacement = function(s, k) {
    let windowStart = 0;
    let dict = {};
    let maxRepeatCharacter = 0;
    let maxLength = 0;

    /**
     * dict = {a:0, b:1, c:1}
     * maxRepeatCharacter = 1
     * maxLength = 2
     * */

    for (let windowEnd = 0; windowEnd < s.length; windowEnd++) {
        if (!(s[windowEnd] in dict)) {
            dict[s[windowEnd]] = 0;
        }
        dict[s[windowEnd]] += 1;

        maxRepeatCharacter = Math.max(maxRepeatCharacter, dict[s[windowEnd]])

        if ((windowEnd - windowStart + 1) - maxRepeatCharacter > k) {
            dict[s[windowStart]] -= 1;
            windowStart += 1;
        }

        maxLength = Math.max(maxLength, windowEnd - windowStart + 1)
    }

    return maxLength;
};

