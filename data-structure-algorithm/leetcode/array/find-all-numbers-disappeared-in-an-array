Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

 
Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2:
Input: nums = [1,1]
Output: [2]
 

Constraints:
n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
 

Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

var findDisappearedNumbers = function(nums) {
	let currentIndex = 0;
	while (currentIndex < nums.length) {
		const currentNum = nums[currentIndex];
		const expectNum = currentIndex + 1;
		
        if (currentNum !== expectNum) {
			const expectIndex = currentNum - 1;
			if (expectIndex > nums.length - 1 || currentNum === nums[expectIndex]) {
				currentIndex += 1;
                continue;
            }
            [nums[currentIndex], nums[expectIndex]] = [nums[expectIndex], nums[currentIndex]];
        } else {
            currentIndex += 1;
        }
    }

    const output = [];
    for (let index = 0; index < nums.length; index++) {
        const currentNum = nums[index];
        const expectNum = index + 1;
        if (currentNum !== expectNum) output.push(expectNum)
    }

    return output;
};

[4,3,2,7,8,2,3,1], currentIndex = 0, currentNum = 4, expectNum = 1
	[7,3,2,4,8,2,3,1], currentIndex = 0, currentNum = 4, expectNum = 1
[7,3,2,4,8,2,3,1], currentIndex = 0, currentNum = 7, expectNum = 1
	[3,3,2,4,8,2,7,1], currentIndex = 0, currentNum = 7, expectNum = 1
[3,3,2,4,8,2,7,1], currentIndex = 0, currentNum = 3, expectNum = 4
	[2,3,3,4,8,2,7,1], currentIndex = 0, currentNum = 3, expectNum = 4
[3,2,3,4,8,2,7,1], currentIndex = 0
[3,2,3,4,8,2,7,1], currentIndex = 1
[3,2,3,4,8,2,7,1], currentIndex = 2
[3,2,3,4,8,2,7,1], currentIndex = 3
[3,2,3,4,8,2,7,1], currentIndex = 4
[3,2,3,4,8,2,7,1], currentIndex = 5
[3,2,3,4,8,2,7,1], currentIndex = 6
[3,2,3,4,8,2,7,1], currentIndex = 7
[1,2,3,4,8,2,7,3], currentIndex = 7
[1,2,3,4,8,2,7,3], currentIndex = 7

output = [5,6]

Time complexity: The first loop is using cyclic sort which takes O(N) time. 
Secondly, iterate through the sorted array and find the missing number and add to the output array. 
This iteration will also take O(N) time. Therefore, the algorithm will be asymptotically equivalent to O(N).

Space complexity: No extra space needed O(1)
	


