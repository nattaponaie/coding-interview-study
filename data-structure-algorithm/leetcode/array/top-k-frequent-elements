Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]
 

Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */

var topKFrequent = function(nums, k) {
    const numFrequency = {}; // O(N) space
	for (const num of nums) { // O(N) time
		if (!(num in numFrequency)) numFrequency[num] = 0;
		numFrequency[num] += 1;
    }
    
    const numCount = Array(nums.length+1).fill(0).map(() => []) // O(N) space
    for (const [key, value] of Object.entries(numFrequency)) { // O(N) time
        numCount[value].push(key);
    }
    
    const result = []
    let kCount = 0;
    for (let idx = nums.length; idx >= 0; idx--) { // O(N + K) time
        for (const num of numCount[idx]) {
            if (kCount >= k) break;
            result.push(num)
            kCount += 1;
        }
    }
    return result;
}

time complexity: O(N+K)
space complexity: O(N)