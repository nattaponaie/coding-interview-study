Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.


Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]

Constraints:
1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
 var combinationSum2 = function(candidates, target) {
    const result = [];
    const currentCandidate = [];
    let sum = 0;
    
    candidates.sort();
    
    const dfs = (ith) => {
        if (sum === target) {
            result.push([...currentCandidate])
            return;
        }
        if (ith >= candidates.length) return;
        if (sum > target) return
        
        const candidate = candidates[ith];
        currentCandidate.push(candidate)
        sum += candidate;
        
        dfs(ith + 1)
        
        currentCandidate.pop();
        sum -= candidate;
        
        while (ith < candidates.length && candidate === candidates[ith+1]) {
            ith += 1;
        }
        dfs(ith + 1);
    }
    dfs(0);
    
    return result;
};

Time complexity: O(2^N)
Space complexity: If we count the result O(N*2^N). If not count O(N)