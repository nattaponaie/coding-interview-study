Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]
 

Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var permute = function(nums) {
	const result = []; // O(N*N!)
	const currentPermute = []; // O(N)
	const visited = {}; // O(N)

	const dfs = (ith) => {
		if (ith >= nums.length) {
			result.push([...currentPermute]);
			return;
        }

        currentPermute.push(nums[ith]);
        visited[ith] = 1;

        if (currentPermute.length === nums.length) {
            result.push([...currentPermute]);
        }

        for (let idx = 0; idx < nums.length; idx++) {
            if (idx in visited && visited[idx] === 1) continue;
            dfs(idx);
        }

        currentPermute.pop();
        visited[ith] = 0;
    }

    for (let idx = 0; idx < nums.length; idx++) {
        dfs(idx);
    }

    return result;
};

Time complexity: As we have to traver for N! times to include every permutations for each num in the array.
Therefore, the algorithm will asymptotically equivalent to O(N*N!)

Space complexity: If we count result array then it the space will take O(N*N!).
In the other hand, O(N)


--

Solution #2

/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var permute = function(nums) {
    const result = [];

    const dfs = (permutation, candidates) => {
        if (permutation.length === candidates.length) {
            result.push(permutation.slice())
            return;
        }

        for (const candidate of candidates) {
            if (permutation.includes(candidate)) continue;

            permutation.push(candidate)

            dfs(permutation, candidates)
            permutation.pop();
        }
    }

    dfs([], nums)

    return result;
};