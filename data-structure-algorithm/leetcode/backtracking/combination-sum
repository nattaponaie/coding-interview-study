Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.


Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []
 

Constraints:
1 <= candidates.length <= 30
1 <= candidates[i] <= 200
All elements of candidates are distinct.
1 <= target <= 500

/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
var combinationSum = function(candidates, target) {
	const result = [];

	const subset = [];
	let sum = 0;

	const dfs = (ith) => {
		if (sum === target) {
            result.push([...subset])
            return;
        }
        if (sum > target) return;
        if (ith >= candidates.length) return;

        subset.push(candidates[ith])
        sum += candidates[ith];
        dfs(ith)

        const popNum = subset.pop();
        sum -= popNum;
        dfs(ith+1);
    }

    dfs(0)
    return result;
};

Time complexity: As we need to traverse untill the sum meet the target then it will take O(2^T) time.
Moreover, we also need to construct a subset of combination sum and in worst case it could be N element.
Therefore, this algorithm will asymptotically equivalent to O(N * 2^T).
Space complexity: O(N * 2^T)
