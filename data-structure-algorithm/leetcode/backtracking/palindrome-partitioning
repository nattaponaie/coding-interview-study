Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

Example 1:
Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

Example 2:
Input: s = "a"
Output: [["a"]]

Constraints:
1 <= s.length <= 16
s contains only lowercase English letters.

/**
 * @param {string} s
 * @return {string[][]}
 */
var partition = function(s) {
	const result = []
	const currentSubString = [];

	const isPalindrome = (startIdx, endIdx) => {
		while(startIdx < endIdx) {
			if (s[startIdx] !== s[endIdx]) return false;
			startIdx += 1;
			endIdx -= 1;
        }
        return true;
    }

	const dfs = (ith) => {
        if (ith >= s.length) {
            result.push(currentSubString.slice())
            return;
        }
        
        for (let idx = ith; idx < s.length; idx++) {
            if (!isPalindrome(ith, idx)) continue;
            currentSubString.push(s.substring(ith, idx + 1));
            
            dfs(idx+1)
            
            currentSubString.pop();
        }
    }

    dfs(0)
    return result;
};

Time complexity: O(N * 2^N)
Space complexity: O(N)