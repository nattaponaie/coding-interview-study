Given an integer array nums of unique elements, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var subsets = function(nums) {
	const result = [];
	const currentSubset = []

	const dfs = (ith) => {
		if (ith >= nums.length) {
			result.push([...currentSubset]);
			return;
        }

        currentSubset.push(nums[ith])
        dfs(ith+1)

        currentSubset.pop();
        dfs(ith+1)
    }
    dfs(0)

    return result;
};

Time complexity: As we need to go through every possible subsets so it will take O(2^N) time 
and we also need O(N) in order to construct a copy of subset to the result array.
Therefore, this algorithm will asymptotically equivalent to O(N*2^N) time.

Space complexity: If we count the result array then it will take O(N*2^N) space.
This is because we could have atmost 2^N subsets and in the worst case each subset can have all N numbers.
