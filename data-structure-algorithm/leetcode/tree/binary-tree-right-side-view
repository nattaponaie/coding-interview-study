Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.


Example 1:
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Example 2:
Input: root = [1,null,3]
Output: [1,3]

Example 3:
Input: root = []
Output: []
 

Constraints:
The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var rightSideView = function(root) {
    const result = []
    if (root === null) return result;
    const queue = [root] // [1] - [2,3] - [5,4]
    
    while (queue.length > 0) {
        const currentQueueLength = queue.length;
        result.push(queue[currentQueueLength - 1].val) // [1,3]
        
        for (let idx = 0; idx < currentQueueLength; idx++) {
            const node = queue.shift();
        
            if (node.left !== null) queue.push(node.left)
            if (node.right !== null) queue.push(node.right)    
        }
    }
    
    return result;
};

Time complexity: BFS takes O(N) time
Time complexity: BFS takes O(N) space for storing node in queue
