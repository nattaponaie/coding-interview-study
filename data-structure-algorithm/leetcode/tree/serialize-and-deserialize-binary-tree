Serialization is the process of converting a data structure or object into a sequence of bits 
so that it can be stored in a file or memory buffer, or transmitted across a network connection 
link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on 
how your serialization/deserialization algorithm should work. You just need to ensure 
that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. 
You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

 

Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:
Input: root = []
Output: []
 

Constraints:
The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */

/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
var serialize = function(root) { // O(N) time, O(N) space
    const preOrder = [];
    const dfs = (node) => {
        if (!node) {
            preOrder.push("null")
            return;
        }
        preOrder.push(node.val)

        dfs(node.left)
        dfs(node.right)
    }
    dfs(root)
    return JSON.stringify(preOrder);
};

/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) { // O(N) time, O(N) space
    const serializedArray = JSON.parse(data);
    let idx = 0;
    const dfs = () => {
        const nodeVal = serializedArray[idx];
        idx += 1;

        if (nodeVal === "null") return null;

        const node = new TreeNode(nodeVal)

        node.left = dfs();
        node.right = dfs();

        return node;
    }
    return dfs();
};

/**
 * Your functions will be called as such:
 * deserialize(serialize(root));
 */