Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.
 

Example 1:
Input: p = [1,2,3], q = [1,2,3]
Output: true

Example 2:
Input: p = [1,2], q = [1,null,2]
Output: false

Example 3:
Input: p = [1,2,1], q = [1,1,2]
Output: false
 

Constraints:
The number of nodes in both trees is in the range [0, 100].
-104 <= Node.val <= 104

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {boolean}
 */
// BFS
var isSameTree = function(p, q) {
    const pQueue = [p];
    const qQueue = [q];
    
    while (pQueue.length > 0 || qQueue.length > 0) {
        const pNode = pQueue.shift()
        const qNode = qQueue.shift();
        
        if (pNode === null && qNode !== null) return false;
        if (pNode !== null && qNode === null) return false;
        if (pNode === null && qNode === null) continue;
        if (pNode.val !== qNode.val) return false;
        
        pQueue.push(pNode.left)
        pQueue.push(pNode.right)
        
        qQueue.push(qNode.left)
        qQueue.push(qNode.right)
    }
    
    return true;
};

// DFS
// var isSameTree = function(p, q) {
//     const dfs = (pNode, qNode) => {
//         if (pNode === null && qNode === null) return true;
//         if (pNode !== null && qNode === null) return false;
//         if (pNode === null && qNode !== null) return false;
//         if (pNode.val !== qNode.val) return false;
        
//         if (dfs(pNode.left, qNode.left) === false 
//             || dfs(pNode.right, qNode.right) === false) return false
        
//         return true
//     }
//     return dfs(p, q);
// }

Time complexity: Both approaches are taking O(N) time as each node is visited only once, 
even if both tree are different but we will terminate iteration immediately.

Space complexity: In BFS, we store each node in queue (N)
In DFS, O(N) as we need space for recursion
