Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
 

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []
 

Constraints:
The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var levelOrder = function(root) {
    const queue = [root]; // [3] - [9,10] - [15,7]
    const result = []; // [[3], [9,20]]
    if (root === null) return result;
    
    while(queue.length > 0) {
        const currentQueueLength = queue.length; // 1 - 2
        
        const currentLevel = [];
        for (let idx = 0; idx < currentQueueLength; idx++) {
            const node = queue.shift(); // 3 - 9,20
            currentLevel.push(node.val) // [3] - [9,20]
            
            if (node.left !== null) queue.push(node.left)
            if (node.right !== null) queue.push(node.right)
        }
        
        result.push(currentLevel)
    }
    
    return result;
};

Time complexity: BFS O(N)
Space complexity: O(N) for queue