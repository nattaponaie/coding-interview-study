Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.


Example 1:
Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true

Example 2:
Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false
 

Constraints:
The number of nodes in the root tree is in the range [1, 2000].
The number of nodes in the subRoot tree is in the range [1, 1000].
-104 <= root.val <= 104
-104 <= subRoot.val <= 104

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} subRoot
 * @return {boolean}
 */
 var isSubtree = function(root, subRoot) {
    const isSame = (node1, node2) => {
        if (node1 === null && node2 === null) return true;
        
        if (node1 === null || node2 === null || node1.val !== node2.val) return false;
        
        return isSame(node1.left, node2.left) && isSame(node1.right, node2.right)
    }
    
    const dfs = (node) => {
        if (node === null) return false;
        
        if (isSame(node, subRoot)) return true;
        
        return dfs(node.left) || dfs(node.right)
    }
    
    return dfs(root)
};

Time complexity: On each DFS traversal of R (root), we traverse through S (subRoot) to check the similarity every time.
Therefore, this algorithm will asymptotically equivalent to O(R*S).

Space complexity: O(R) as we need space for recursion stack in order to traverse through all element in root tree 

