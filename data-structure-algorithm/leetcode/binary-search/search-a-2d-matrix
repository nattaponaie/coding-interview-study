Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

/**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
var searchMatrix = function(matrix, target) {
	const totalRow = matrix.length;
	let targetRow = -1;

	for (let index = 0; index < totalRow; index++) { // O(M) time
		const rowLength = matrix[index].length;
		const lastIndex = rowLength - 1;
		const lastNum = matrix[index][lastIndex];
		if (lastNum === target) return true;
		else if (target < lastNum) {
            targetRow = index;
            break;
        }
    }

    if (targetRow === -1) return false;

    let start = 0, end = matrix[targetRow].length - 1;
    while (start <= end) { // O(logN) time
        const middleIdx = Math.floor((start + end) / 2);
        const middleNum = matrix[targetRow][middleIdx];
        if (middleNum === target) return true;
        else if (middleNum < target) start = middleIdx + 1;
        else end = middleIdx - 1;
    }
    return false;
};

Time complexity: O(M + logN) time
Space complexity: O(1) space
