You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:
The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
// var addTwoNumbers = function(l1, l2) {
//     const getNumbers = (head) => {
//         let current = head, numberStr = '';
//         while (current !== null) {
//             numberStr += '' + current.val;
//             current = current.next
//         }
//         return numberStr;
//     }

//     let l1NumberStr = getNumbers(l1);
//     l1NumberStr = l1NumberStr.split('').reverse().join('');
//     let l2NumberStr = getNumbers(l2);
//     l2NumberStr = l2NumberStr.split('').reverse().join('');
    
//     let sum = Number(parseInt(l1NumberStr) + parseInt(l2NumberStr));
//     sum = sum.toString().split('').reverse().join('');
    
//     const n = sum.length;
//     let head = null;
//     let prevNode = null;
    
//     for (let ithSum = 0; ithSum < n; ithSum++) {
//         const num = sum[ithSum];
        
//         const newNode = new ListNode(num);
//         if (prevNode !== null) {
//             prevNode.next = newNode
//         }
        
//         if (head === null) head = newNode;
        
//         prevNode = newNode
//     }
    
//     return head;
// };

// Time complexity: O(N)
// Space complexity: O(1)
var addTwoNumbers = function(l1, l2) {
    let head = new ListNode();
    
    let prev = head, carry = 0;
    
    while (l1 !== null || l2 !== null || carry !== 0) {
        const l1Num = l1 === null ? 0 : l1.val;
        const l2Num = l2 === null ? 0 : l2.val;
        
        const sum = l1Num + l2Num + carry;
        
        const newCarry = Math.floor(sum / 10);
        const newVal = sum % 10;
        
        const newNode = new ListNode(newVal);
        prev.next = newNode;
        
        prev = newNode;
        carry = newCarry;
        l1 = l1 === null ? null : l1.next;
        l2 = l2 === null ? null : l2.next;
    }
    
    return head.next;
}