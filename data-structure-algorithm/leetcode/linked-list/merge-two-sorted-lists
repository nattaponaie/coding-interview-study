You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.
 

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: list1 = [], list2 = []
Output: []

Example 3:
Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} list1
 * @param {ListNode} list2
 * @return {ListNode}
 */
var mergeTwoLists = function(list1, list2) {
    let currentNode1 = list1;
    let currentNode2 = list2;
    let head = null; // 1
    let current = null; // 1 - 1
    
    const connect = (connectNode) => {
        if (current === null && head === null) {
            current = connectNode; // 1
            head = connectNode; // 1
            return;
        }
        current.next = connectNode; // 1 -> 1
        current = connectNode;
    }
    
    while (currentNode1 !== null || currentNode2 !== null) {
        if (currentNode1 === null) {
            const cloneNextNode = currentNode2.next;
            connect(currentNode2)
            currentNode2 = cloneNextNode;
            continue;
        }
        if (currentNode2 === null) {
            const cloneNextNode = currentNode1.next;
            connect(currentNode1)
            currentNode1 = cloneNextNode;
            continue;
        }
        
        if (currentNode1.val <= currentNode2.val) {
            const cloneNextNode = currentNode1.next; // 2
            connect(currentNode1) // 1
            currentNode1 = cloneNextNode; // 2
        } else if (currentNode1.val > currentNode2.val) {
            const cloneNextNode = currentNode2.next; // 3
            connect(currentNode2) // 1
            currentNode2 = cloneNextNode;
        }
    }
    
    return head;
};

Time complexity: O(N + M)
Space complexity: O(1)
