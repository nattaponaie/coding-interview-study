
var MedianFinder = function() {
    this.maxHeap = new MaxPriorityQueue({ compare: (x,y) => y-x })
    // []->[1]->[3,1]
    this.minHeap = new MinPriorityQueue({ compare: (x,y) => x-y })
    // []->[2]
};

/** 
 * @param {number} num
 * @return {void}
 */
MedianFinder.prototype.addNum = function(num) { // 1->2->3
    if (this.maxHeap.size() === 0) {
        this.maxHeap.enqueue(num)
        return;
    }

    if (num > this.maxHeap.front()) {
        this.minHeap.enqueue(num)
    } else this.maxHeap.enqueue(num)

    if (this.minHeap.size() > this.maxHeap.size()) {
        this.maxHeap.enqueue(this.minHeap.dequeue())
    } else if (this.maxHeap.size() - this.minHeap.size() === 2) {
        this.minHeap.enqueue(this.maxHeap.dequeue())
    }
};

/**
 * @return {number}
 */
MedianFinder.prototype.findMedian = function() {
    // this.nums.sort((a,b) => a-b)
    // const middleIdx = Math.floor(this.nums.length / 2);
    // if (this.nums.length % 2 === 0) {
    //     // even
    //     return (this.nums[middleIdx-1] + this.nums[middleIdx]) / 2
    // } else {
    //     // odd
    //     return this.nums[middleIdx]
    // }
    
    if (this.maxHeap.size() === this.minHeap.size()) {
        return (this.maxHeap.front() + this.minHeap.front()) / 2;
    }
    return this.maxHeap.front();
};

/** 
 * Your MedianFinder object will be instantiated and called as such:
 * var obj = new MedianFinder()
 * obj.addNum(num)
 * var param_2 = obj.findMedian()
 */

Solution # Two Heap
We can use 2 heaps to solve this problem. The first Heap is called maxHeap, to keep track of the maximum number. 
The second Heap is called minHeap, to keep track of the minimum number. 
The idea is to always keep all the numbers in the maxHeap to be less than all the numbers in the minHeap. 
Furthermore, we have to make sure that the minHeap size cannot be larger than the maxHeap size 
and the maxHeap size cannot be larger than 2 compared to the minHeap size.

Time complexity
	addNum -> O(logN) where N is the total numbers in the maxHeap and minHeap combined.
	findMedian -> O(1) since peaking the max and min values from the Heap is only taking constant time.
Space Complexity
	O(N)
