Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Implement KthLargest class:

KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.
 

Example 1:
Input
["KthLargest", "add", "add", "add", "add", "add"]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]

Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8
 

Constraints:
1 <= k <= 104
0 <= nums.length <= 104
-104 <= nums[i] <= 104
-104 <= val <= 104
At most 104 calls will be made to add.
It is guaranteed that there will be at least k elements in the array when you search for the kth element.

/**
 * @param {number} k
 * @param {number[]} nums
 */
var KthLargest = function(k, nums) {
    this.minHeap = new MinPriorityQueue({ // O(K) space
		compare: (x, y) => x-y,
	});
	this.k = k;

	for (let index = 0; index < nums.length; index++) { // O(N*logN) time
        const num = nums[index];
        this.add(num)
    }
};

/** 
 * @param {number} val
 * @return {number}
 */
KthLargest.prototype.add = function(val) {
    if (this.minHeap.size() < this.k) {
        this.minHeap.enqueue(val) // O(logK) time
        return this.minHeap.front(); // O(1) time
    }
    
	const minNum = this.minHeap.front(); // O(1) time
	if (val > minNum) {
		this.minHeap.dequeue(); // O(logK) time
		this.minHeap.enqueue(val); // O(logK) time
	}
    return this.minHeap.front(); // O(1) time
};

Time complexity: Let's define total element of nums as N and total add as M. In the constructor, we iterate through nums elements and add to the MinHeap.
This will take O(N * logN) time. Secondly, in add function, there are total M of add calls and each call we only add or delete element from MinHeap only once.
Therefore, our algorithm will be O(N * log(N) + M * log(K)) time

Space complexity: As we only store only k elements in the heap. It will take O(K) space