/**
 * @param {number[][]} points
 * @param {number} k
 * @return {number[][]}
 */

class ClosetPoint {
    constructor(distance, point) {
        this.distance = distance;
        this.point = point;
    }
}

var kClosest = function(points, k) {
    const maxHeap = new MaxPriorityQueue({ // O(K) space
        compare: (x,y) => y.distance-x.distance
    })
    // [{sqrt(10),[1,3]}]

    const add = (distance, point) => { // O(logK) time
        // sqrt(10), [1,3]->sqrt(8), [2,2]
        if (maxHeap.size() === k) {
            if (distance <= maxHeap.front().distance) {
                maxHeap.dequeue()
                maxHeap.enqueue(new ClosetPoint(distance, point))
            }
        } else {
            maxHeap.enqueue(new ClosetPoint(distance, point))
        }
    }

    for (const point of points) { // O(N * logK) time
        const x = point[0] // 1->-2
        const y = point[1] // 3->2
        const distance = Math.sqrt(Math.pow(x-0, 2) + Math.pow(y-0, 2)) // sqrt(10)->sqrt(8)
        add(distance, point)
    }

    const result = []
    for (const closetOrigin of maxHeap.toArray()) { // O(K) time
        result.push(closetOrigin.point)
    }
    return result;
};/**
 * @param {number[][]} points
 * @param {number} k
 * @return {number[][]}
 */

class ClosetPoint {
    constructor(distance, point) {
        this.distance = distance;
        this.point = point;
    }
}

var kClosest = function(points, k) {
    const maxHeap = new MaxPriorityQueue({ // O(K) space
        compare: (x,y) => y.distance-x.distance
    })
    // [{sqrt(10),[1,3]}]

    const add = (distance, point) => { // O(logK) time
        // sqrt(10), [1,3]->sqrt(8), [2,2]
        if (maxHeap.size() === k) {
            if (distance <= maxHeap.front().distance) {
                maxHeap.dequeue()
                maxHeap.enqueue(new ClosetPoint(distance, point))
            }
        } else {
            maxHeap.enqueue(new ClosetPoint(distance, point))
        }
    }

    for (const point of points) { // O(N * logK) time
        const x = point[0] // 1->-2
        const y = point[1] // 3->2
        const distance = Math.sqrt(Math.pow(x-0, 2) + Math.pow(y-0, 2)) // sqrt(10)->sqrt(8)
        add(distance, point)
    }

    const result = []
    for (const closetOrigin of maxHeap.toArray()) { // O(K) time
        result.push(closetOrigin.point)
    }
    return result;
};

Solution # MaxHeap
Letâ€™s start with an iteration of the given points. 
In each iteration, we have to calculate the distance by using the Euclidean distance equation. 
Moreover, we have to keep tracking the K closest points to origin by using the Maxheap. 
The reason that the Maxheap is chosen is because we want the minimum distance between point to origin to be tracked on K times.

Time complexity
	O(N*logK) where N is the length of the given points and K is the K closest points to origin.
Space Complexity
	O(K) for storing the K closest points to origin.
