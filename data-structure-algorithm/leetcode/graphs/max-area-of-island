You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) 
You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:
Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],
[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.

Example 2:
Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
 

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxAreaOfIsland = function(grid) {
    const rows = grid.length;
    const columns = grid[0].length;
    let maxIslands = 0;
    
    if (rows < 0) return maxIslands;
    
    const dfs = (rowIdx, colIdx) => {
        if (rowIdx < 0 || rowIdx >= rows
           || colIdx < 0 || colIdx >= columns
           || grid[rowIdx][colIdx] === 0) {
            return 0
        }
        
        let islands = 1;
        grid[rowIdx][colIdx] = 0;
        
        islands += dfs(rowIdx+1, colIdx)
        islands += dfs(rowIdx-1, colIdx)
        islands += dfs(rowIdx, colIdx+1)
        islands += dfs(rowIdx, colIdx-1)
        
        return islands
    }
    
    // O(M*N) time
    for (let rowIdx = 0; rowIdx < rows; rowIdx++) {
        for (let colIdx = 0; colIdx < columns; colIdx++) {
            const currentPos = grid[rowIdx][colIdx];
            if (currentPos === 1) {
                maxIslands = Math.max(maxIslands, dfs(rowIdx, colIdx));
            }
        }
    }
    
    return maxIslands
};

Time complexity: O(M*N), As we visit each area only once
Space complexity: O(1) no extra space needed if we are not counting call stack of recursion.
if it's counted, the space will take O(M*N) 
