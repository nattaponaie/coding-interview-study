There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, 
return any of them. If it is impossible to finish all courses, return an empty array.


Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

Example 2:
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

Example 3:
Input: numCourses = 1, prerequisites = []
Output: [0]
 

Constraints:
1 <= numCourses <= 2000
0 <= prerequisites.length <= numCourses * (numCourses - 1)
prerequisites[i].length == 2
0 <= ai, bi < numCourses
ai != bi
All the pairs [ai, bi] are distinct.


/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {number[]}
 */
var findOrder = function(numCourses, prerequisites) {
	if (prerequisites.length < 0) return [0];
	
    // [0,0]
    // [0,1]
    const edgeWithParentCountMap = Array(numCourses).fill(0);
	
	// [[],[]]
	// [[1],[]]
	const graph = Array(numCourses).fill(0).map(() => [])

	for (let index = 0; index < prerequisites.length; index++) {
		const prerequisite = prerequisites[index]; // [1,0]
		const parent = prerequisite[1] // 0
		const child = prerequisite[0] // 1

		graph[parent].push(child)
		edgeWithParentCountMap[child] += 1;
    }

    const sortedOrder = []; // [0]
    const queue = []; // 0
    for (let index = 0; index < edgeWithParentCountMap.length; index++) {
        if (edgeWithParentCountMap[index] === 0) queue.push(index);
    }


    while (queue.length > 0) {
        const edge = queue.shift(); // 0
        sortedOrder.push(edge);
        graph[edge].forEach((child) => {
            edgeWithParentCountMap[child] -= 1;
            if (edgeWithParentCountMap[child] === 0) queue.push(child);
        })
    }

    return sortedOrder.length !== numCourses ? [] : sortedOrder;
};

Time complexity: In the first loop, we are generating adjacency graph which takes O(E).
In the second loop, we are finding any vertice that has zero child which takes O(V).
Lastly, we iterate through the queue and also vertice's child in order to find the next vertice that has zero child
Therefore, this algorithm will asymptotically equivalent to O(V+E).

Space complexity: To store adjacency graph, it takes O(V+E) space.
