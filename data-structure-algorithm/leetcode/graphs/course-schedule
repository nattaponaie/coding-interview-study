There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.


Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:
1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.

/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {boolean}
 */
var canFinish = function(numCourses, prerequisites) {
	const nodeWithParentCount = Array(numCourses).fill(0); // O(V) space
	const graph = Array(numCourses).fill(0).map(() => []); // O(V+E) space

	for (let index = 0; index < prerequisites.length; index++) { // O(E) time
		const course = prerequisites[index];
		const parent = course[1];
		const child = course[0];

		graph[parent].push(child);
		nodeWithParentCount[child] += 1;
    }

    const sources = [];
    for (let index = 0; index < numCourses; index++) { // O(V) time
        if (nodeWithParentCount[index] === 0) {
            sources.push(index);
        }
    }

    const sortedOrder = [];
    while (sources.length > 0) { // O(V) time
        const vertice = sources.shift();
        sortedOrder.push(vertice);

        graph[vertice].forEach((child) => { // O(E) time
            nodeWithParentCount[child] -= 1;
            if (nodeWithParentCount[child] === 0) {
                sources.push(child);
            }
        })
    }

    return sortedOrder.length === numCourses;
};

Time complexity: In while loop, we only iterate through each vertice only once and each vertice's edges are also accessed and removed only once as well.
Therefore, this algorithm will asymptotically equivalent to O(V+E) time.
Space complexity: As we store every vertice with its edges. Therefore, it will also be O(V+E) space.
