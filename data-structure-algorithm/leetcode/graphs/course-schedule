There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.


Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:
1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.

/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {boolean}
 */
var canFinish = function(numCourses, prerequisites) {
	const nodeWithParentCount = Array(numCourses).fill(0);
	const graph = Array(numCourses).fill(0).map(() => []);

	for (let index = 0; index < prerequisites.length; index++) {
		const course = prerequisites[index];
		const parent = course[1];
		const child = course[0];

		graph[parent].push(child);
		nodeWithParentCount[child] += 1;
    }

    const sources = [];
    for (let index = 0; index < numCourses; index++) {
        if (nodeWithParentCount[index] === 0) {
            sources.push(index);
        }
    }

    const sortedOrder = [];
    while (sources.length > 0) {
        const vertice = sources.shift();
        sortedOrder.push(vertice);

        graph[vertice].forEach((child) => {
            nodeWithParentCount[child] -= 1;
            if (nodeWithParentCount[child] === 0) {
                sources.push(child);
            }
        })
    }

    return sortedOrder.length === numCourses;
};


