Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.



// 1 BFS
/**
 * @param {character[][]} grid
 * @return {number}
 */
 var numIslands = function(grid) {
    const rows = grid.length;
    const columns = grid[0].length;
    const visited = new Set(); // O(M*N) space
    
    const bfs = (rowIdx, colIdx) => {
        const queue = [[rowIdx, colIdx]];
        while (queue.length > 0) {
            const position = queue.shift();
            const positionRow = position[0];
            const positionCol = position[1];
            visited.add(positionRow + ',' + positionCol)

            const directions = [[positionRow - 1, positionCol], [positionRow, positionCol + 1], [positionRow + 1, positionCol], [positionRow, positionCol - 1]];
            
            if (grid[positionRow][positionCol] === '1') {
                for (let directionIdx = 0; directionIdx < directions.length; directionIdx++) {
                    const currentDirection = directions[directionIdx];
                    const directionRow = currentDirection[0]
                    const directionCol = currentDirection[1]
                    if ((directionRow >= 0 && directionRow < rows)
                       && (directionCol >= 0 && directionCol < columns)
                       && (grid[directionRow][directionCol] === '1')
                       && (!visited.has(directionRow + ',' + directionCol))) {
                        queue.push([directionRow, directionCol])
                        visited.add(directionRow + ',' + directionCol)
                    }
                }
            }
        }
    }
    
    let islandsCount = 0;
    for (let rowIdx = 0; rowIdx < rows; rowIdx++) {
        for (let colIdx = 0; colIdx < columns; colIdx++) {
            const currentPosition = grid[rowIdx][colIdx];
            if (currentPosition === '1' && !visited.has(rowIdx + ',' + colIdx)) {
                bfs(rowIdx, colIdx);
                islandsCount += 1;
            }
        }
    }
    
    return islandsCount;
};

// Time complexity: O(M*N) as we only visit each node only once.
// Space complexity: O(M*N) for storing adjacency graph.


// 2 DFS

/**
 * @param {character[][]} grid
 * @return {number}
 */
 var numIslands = function(grid) {
    const rows = grid.length;
    const columns = grid[0].length;
    
    const dfs = (rowIdx, colIdx) => {
        if (rowIdx < 0 || rowIdx >= rows
           || colIdx < 0 || colIdx >= columns
           || grid[rowIdx][colIdx] === '0') return;
        
        grid[rowIdx][colIdx] = '0'
        
        dfs(rowIdx + 1, colIdx)
        dfs(rowIdx - 1, colIdx)
        dfs(rowIdx, colIdx + 1)
        dfs(rowIdx, colIdx - 1)
    }
    
    let islands = 0;
    for (let rowIdx = 0; rowIdx < rows; rowIdx++) {
        for (let colIdx = 0; colIdx < columns; colIdx++) {
            if (grid[rowIdx][colIdx] === '1') {
                islands += 1;
                dfs(rowIdx, colIdx);
            }
        }
    }
    
    return islands
};

Time complexity: O(M*N) as we mark the visited node already that why we only visit each node only once. 
Therefore, this algorithm will asymptotically equivalent to O(M*N).

Space complexity: It's O(1) without extra space for recursive call
if it's counted, the space will take O(M*N) 
