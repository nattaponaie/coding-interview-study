A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

Example 1:
Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Example 2:
Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

Example 3:
Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
 

Constraints:
1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.

/**
 * @param {string} s
 * @return {boolean}
 */
 var isPalindrome = function(s) {
	const isCharacterALetter = (char) => {
        return (/[a-zA-Z0-9]/).test(char)
    }

    let pStart = 0, pEnd = s.length - 1;
    while (pStart <= pEnd) {
        const leftChar = s[pStart].toLowerCase();
        const rightChar = s[pEnd].toLowerCase();

        if (!isCharacterALetter(leftChar)) {
            pStart += 1;
            continue;
        }

        if (!isCharacterALetter(rightChar)) {
            pEnd -= 1;
            continue;
        }

        if (leftChar === rightChar) {
            pStart += 1;
            pEnd -= 1;
        } else {
            return false;
        }
    }

    return true;
};

Time complexity: since we only iterate through each element only once. Therefore, it will take O(N) time
Space complexity: O(1) as no extra space needed
