Problem Statement#
Given an array of unsorted numbers and a target number, find a triplet in the array whose sum is as close to the target number as possible, return the sum of the triplet. If there are more than one such triplet, return the sum of the triplet with the smallest sum.

Example 1:
Input: [-2, 0, 1, 2], target=2
Output: 1
Explanation: The triplet [-2, 1, 2] has the closest sum to the target.

Example 2:
Input: [-3, -1, 1, 2], target=1
Output: 0
Explanation: The triplet [-3, 1, 2] has the closest sum to the target.

Example 3:
Input: [1, 0, 1, 1], target=100
Output: 3
Explanation: The triplet [1, 1, 1] has the closest sum to the target.


#1 Approach

X + Y + Z = target
Y + Z = target - X

sort input 
declare closetMinValueToTarget = 0;	

start iteration to find target - X (2-(-2))
	start iteration while pointerLeft less than pointerRight for Y + Z = target - X
		check if target - (X + Y + Z) result is lower or equal to closetMinValueToTarget
and not equal to 0
			set closetMinValueToTarget = (X + Y + Z)
		check if (X + Y + Z) less than target
			pointerLeft increase by 1
		check if (X + Y + Z) more than target
			pointerRight decrease by 1

—------




const triplet_sum_close_to_target = function(arr, target_sum) {
  arr.sort((a,b) => a - b);
  let closestMinValueToTarget = 0;

  const findPairOfTarget = (startingIdx, xNum) => {
    let pLeft = startingIdx;
    let pRight = arr.length - 1;

    while (pLeft < pRight) {
      const xyzSum = Math.abs(xNum + arr[pLeft] + arr[pRight]);
      const calculatedNum = target_sum - xyzSum;
      if (calculatedNum > 0 && calculatedNum > closestMinValueToTarget
      && calculatedNum < target_sum) {
        closestMinValueToTarget = xyzSum;
      }

      if (calculatedNum < target_sum) {
        pLeft += 1;
      } else {
        pRight -= 1;
      }
    }
  }

  for (let i = 0; i < arr.length; i++) {
    findPairOfTarget(i + 1, arr[i]);
  }

  return closestMinValueToTarget
};


—---


Time complexity: O(N^2)
Space complexity: O(N)
