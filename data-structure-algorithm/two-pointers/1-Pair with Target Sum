Problem Statement#
Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.

Write a function to return the indices of the two numbers (i.e. the pair) such that they add up to the given target.

Example 1:
Input: [1, 2, 3, 4, 6], target=6
Output: [1, 3]
Explanation: The numbers at index 1 and 3 add up to 6: 2+4=6

Example 2:
Input: [2, 5, 9, 11], target=11
Output: [0, 2]
Explanation: The numbers at index 0 and 2 add up to 11: 2+9=11


-------

while loop with condition pLeft less than pRight
    sum number of pLeft and pRight

    check that the sum of pair equal to target
        add result as current pLeft and pRight index
    else if the sum of pair > target
        decrease pRight
    else
        increase pLeft

Time complexity: O(N)
Space complexity: O(1)

----------

let pLeft = 0;
let pRight = arr.length - 1;
const result = [];

while (pLeft < pRight) {
    const sumOfCurrentPair = arr[pLeft] + arr[pRight];
    if (sumOfCurrentPair === target_sum) {
        result.push(pLeft)
        result.push(pRight)
        break;
    } else if (sumOfCurrentPair > target_sum) {
        pRight -= 1;
    } else {
        pLeft += 1;
    }
}

return result;

---------


[1, 2, 3, 4, 6], target=6

// 1 pLeft = 0; pRight = 4;
    // 1 pLeft = 0; pRight = 3;
// 2 pLeft = 0; pRight = 3;
    // 2 pLeft = 1; pRight = 3;
// 3 pLeft = 1; pRight = 3;
    // 3 pLeft = 1; pRight = 3;
    break;


---------

X + target = target_sum
target = target_sum - X

let dict = {};

for (let i = 0; i < arr.length; i++) {
    const num = arr[i];
    const targetResult = target_sum - num;
    if (targetResult in dict) {
        return [dict[targetResult], i];
    }
    dict[num] = i;
}

Time complexity: O(N)
Space complexity: O(N)