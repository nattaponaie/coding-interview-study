ree Diameter (medium) #
Given a binary tree, find the length of its diameter. The diameter of a tree is the number of nodes on the longest path between any two leaf nodes. The diameter of a tree may or may not pass through the root.

Note: You can always assume that there are at least two leaf nodes in the given tree.

Example 1:
1
2
3
4
5
6
Output: 5
Explanation: The diameter of the tree is: [4, 2, 1, 3, 6]

Example 2:
1
2
3
5
6
7
8
10
9
11
Output: 7
Explanation: The diameter of the tree is: [10, 8, 5, 3, 6, 9, 11]

class TreeNode {

  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null; 
  }
};


class TreeDiameter {

  constructor() {
    this.treeDiameter = 0;
  }

  find_diameter(root) {
    const dfs = (node) => {
      if (node === null) return 0;

      const leftHeight = dfs(node.left)
      const rightHeight = dfs(node.right)

      if (leftHeight !== 0 && rightHeight !== 0) {
        const currentDiameter = leftHeight + rightHeight + 1;
        this.treeDiameter = Math.max(this.treeDiameter, currentDiameter)
      }

      return Math.max(leftHeight, rightHeight) + 1
    }
    dfs(root)

    return this.treeDiameter
  }
};

Time complexity: O(N)
Space complexity: O(N)


var treeDiameter = new TreeDiameter()
var root = new TreeNode(1)
root.left = new TreeNode(2)
root.right = new TreeNode(3)
root.left.left = new TreeNode(4)
root.right.left = new TreeNode(5)
root.right.right = new TreeNode(6)
console.log(`Tree Diameter: ${treeDiameter.find_diameter(root)}`)
root.left.left = null
root.right.left.left = new TreeNode(7)
root.right.left.right = new TreeNode(8)
root.right.right.left = new TreeNode(9)
root.right.left.right.left = new TreeNode(10)
root.right.right.left.left = new TreeNode(11)
console.log(`Tree Diameter: ${treeDiameter.find_diameter(root)}`)
