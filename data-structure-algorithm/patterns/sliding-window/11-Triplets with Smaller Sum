Problem Statement#
Given an array arr of unsorted numbers and a target sum, count all triplets in it such that arr[i] + arr[j] + arr[k] < target where i, j, and k are three different indices. Write a function to return the count of such triplets.

Example 1:
Input: [-1, 0, 2, 3], target=3 
Output: 2
Explanation: There are two triplets whose sum is less than the target: [-1, 0, 3], [-1, 0, 2]

Example 2:
Input: [-1, 4, 2, 1, 3], target=5 
Output: 4
Explanation: There are four triplets whose sum is less than the target: 
   [-1, 1, 4], [-1, 1, 3], [-1, 1, 2], [-1, 2, 3]

X + Y + Z < target
each iteration we are at X so the equation will be Y + Z < target - X

const triplet_with_smaller_sum = function(arr, target) {
  let count = 0;

  arr.sort((a,b) => a-b); // O(N * logN) time, O(N) space

  const findTwoSum = (target, startIndex) => {
    let pLeft = startIndex;
    let pRight = arr.length - 1;
    while (pLeft < pRight) {
      const leftNum = arr[pLeft];
      const rightNum = arr[pRight];
      const currentSum = leftNum + rightNum;
      if (currentSum < target) {
        count += pRight - pLeft;
        pLeft += 1;
      } else {
        pRight -= 1;
      }
    }
  }

  for (let currentIndex = 0; currentIndex < arr.length; currentIndex++) { // O(N) time
    const num = arr[currentIndex];
    findTwoSum(target - num, currentIndex + 1); // O(N) time
  }

  return count;
};



Input: [-1, 0, 2, 3], target=3 
Output: 2

arr = [-1,0,2,3]
#1 currentIndex = 0, count = 0, num = -1
	#1 target = 4, startIndex = 1, pLeft = 1, pRight = 3, count = 0
	#1 target = 4, startIndex = 1, pLeft = 2, pRight = 3, count = 2
	
Time complexity#
Sorting the array will take O(N * logN) The findTwoSum() will take O(N)
So, overall triplet_with_smaller_sum() will take O(N * logN + N^2)
which is asymptotically equivalent to O(N^2).

Space complexity#
The space complexity of the above algorithm will be O(N)
which is required for sorting if we are not using an in-place sorting algorithm.