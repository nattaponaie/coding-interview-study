Problem Statement #
Given an array of ‘K’ sorted LinkedLists, merge them into one sorted list.

Example 1:
Input: L1=[2, 6, 8], L2=[3, 6, 7], L3=[1, 3, 4]
Output: [1, 2, 3, 3, 4, 6, 6, 7, 8]

Example 2:
Input: L1=[5, 8, 9], L2=[1, 7]
Output: [1, 5, 7, 8, 9]


const Heap = require('./collections/heap');
class ListNode {
  constructor(value, next=null){
    this.value = value;
    this.next = next;
  }
}

  
const merge_lists = function(lists) {
  let resultHead = null;
  let tailNode = null;

  const minHeap = new Heap([], null, (a,b) => b.value - a.value);

  // O(K * logK)
  for (const list of lists) {
    minHeap.push(list);
  }

  // O(N * logK)
  while (minHeap.length > 0) {
    const smallestNode = minHeap.pop();
    if (resultHead === null) {
      resultHead = smallestNode;
    } else {
      tailNode.next = smallestNode;
    }
    tailNode = smallestNode;

    if (smallestNode.next !== null) minHeap.push(smallestNode.next);
  }

  return resultHead;
};

Time complexity: Since we iterate through every element (N) in K input array and 
each iteration we also remove/add a number to the Heap.
Therefore, this algorithm will take O(N * logK) time.

Space complexity: We only store total K numbers in the Heap. So, it will be O(K) space.


-----------


l1 = new ListNode(2)
l1.next = new ListNode(6)
l1.next.next = new ListNode(8)

l2 = new ListNode(3)
l2.next = new ListNode(6)
l2.next.next = new ListNode(7)

l3 = new ListNode(1)
l3.next = new ListNode(3)
l3.next.next = new ListNode(4)

result = merge_lists([l1, l2, l3])
output = "Here are the elements form the merged list: ";
while (result != null) {
    output += result.value + " ";
    result = result.next;
}
console.log(output);
