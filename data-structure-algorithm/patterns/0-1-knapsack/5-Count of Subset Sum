Given a set of positive numbers, find the total number of subsets whose sum is equal to a given number ‘S’.

Example 1: #
Input: {1, 1, 2, 3}, S=4
Output: 3
The given set has '3' subsets whose sum is '4': {1, 1, 2}, {1, 3}, {1, 3}
Note that we have two similar sets {1, 3}, because we have two '1' in our input.

Example 2: #
Input: {1, 2, 7, 1, 5}, S=9
Output: 3
The given set has '3' subsets whose sum is '9': {2, 7}, {1, 7, 1}, {1, 2, 1, 5}


const countSubsets = function(num, sum) {
    const n = num.length;
    const dp = Array(2).fill(0).map(() => Array(sum+1).fill(0)); // O(2*S) space

    for (let i = 0; i < n; i++) { // O(N) time
        dp[i%2][0] = 1;
    }

    for (let s = 1; s <= sum; s++) { // O(S) time
        dp[0][s] = num[0] === s ? 1 : 0;
    }

    for (let i = 1; i < n; i++) { // O(N) time
        for (s = 1; s <= sum; s++) { // O(S) time
            dp[i%2][s] = dp[(i-1)%2][s];
            if (s >= num[i]) {
                dp[i%2][s] += dp[(i-1)%2][s - num[i]];
            }
        }
    }

    console.log(dp)

    return dp[(n-1)%2][sum];
};

console.log(`Count of subset sum is: ---> ${countSubsets([1, 1, 2, 3], 4)}`);
console.log(`Count of subset sum is: ---> ${countSubsets([1, 2, 7, 1, 5], 9)}`);

Time complexity: O(N*S)
Space complexity: O(2*S) -> asymptotically O(S)