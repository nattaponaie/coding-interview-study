Problem Statement#
Given a set of positive numbers, find if we can partition it into two subsets such that the sum of elements in both subsets is equal.

Example 1:
Input: {1, 2, 3, 4}
Output: True
Explanation: The given set can be partitioned into two subsets with equal sum: {1, 4} & {2, 3}

Example 2:
Input: {1, 1, 3, 4, 7}
Output: True
Explanation: The given set can be partitioned into two subsets with equal sum: {1, 3, 4} & {1, 7}

Example 3:
Input: {2, 3, 4, 6}
Output: False
Explanation: The given set cannot be partitioned into two subsets with equal sum.

const can_partition = function(nums) {
  let sum = 0;
  const n = nums.length;

  for (let i = 0; i < n; i++) {
    const num = nums[i];
    sum += num;
  }

  if (sum % 2 !== 0) return false;

  sum = sum / 2;
  const dp = Array(n).fill(false).map(() => Array(sum + 1).fill(false))

  // populate the sum=0 columns, as we can always for '0' sum with an empty set
  for (let i = 0; i < n; i++) dp[i][0] = true;

  // with only one number, we can form a subset only when the required sum is equal to its value
  for (let s = 1; s <= sum; s++) {
    dp[0][s] = nums[0] == s;
  }

  // console.log(dp)

  for (let i = 1; i < n; i++) {
    for (let s = 1; s <= sum; s++) {
      dp[i][s] = dp[i-1][s] || dp[i-1][s - nums[i]]
    }
  }

  return dp[n-1][sum];
};


console.log(`Can partition: ${can_partition([1, 2, 3, 4])}`)
console.log(`Can partition: ${can_partition([1, 1, 3, 4, 7])}`)
console.log(`Can partition: ${can_partition([2, 3, 4, 6])}`)

Time and Space complexity#
The above solution the has time and space complexity of O(N*S)
O(N∗S)
, where ‘N’ represents total numbers and ‘S’ is the total sum of all the numbers.