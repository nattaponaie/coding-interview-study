Problem Statement#
Given two integer arrays to represent weights and profits of ‘N’ items, 
we need to find a subset of these items which will give us maximum profit such that their cumulative weight is not more than a given number ‘C.’ 
Each item can only be selected once, which means either we put an item in the knapsack or we skip it.


let solveKnapsack = function(profits, weights, capacity) {
	if (profits.length !== weights.length) return 0;

	const recursive = (profits, weights, capacity, currentIndex) => {
		if (currentIndex > profits.length - 1) return 0;
		if (capacity < 1) return 0;

		const currentWeight = weights[currentIndex];
    	const currentProfit = profits[currentIndex];
    	let profitLeft = 0;
		if (currentWeight <= capacity) {
			profitLeft = currentProfit + recursive(profits, weights, capacity-currentWeight, currentIndex + 1);
		}
		const profitRight = recursive(profits, weights, capacity, currentIndex + 1);
		return Math.max(profitLeft, profitRight);
  	}
  
  	const result = recursive(profits, weights, capacity, 0);
  	return result;
};


var profits = [1, 6, 10, 16];
var weights = [1, 2, 3, 5];
console.log(`Total knapsack profit: ---> ${solveKnapsack(profits, weights, 7)}`);
console.log(`Total knapsack profit: ---> ${solveKnapsack(profits, weights, 6)}`);

Time complexity
The above algorithm’s time complexity is exponential O(2^n), where ‘n’ represents the total number of items. 
This can also be confirmed from the above recursion tree. 
As we can see, we will have a total of ‘31’ recursive calls – calculated through (2^n) + (2^n) - 1
, which is asymptotically equivalent to O(2^n).

Space complexity
The space complexity is O(n). This space will be used to store the recursion stack. 
Since the recursive algorithm works in a depth-first fashion, 
which means that we can’t have more than ‘n’ recursive calls on the call stack at any time.


#2 Optimize by adding memoization
let solveKnapsack = function(profits, weights, capacity) {
	if (profits.length !== weights.length) return 0;
	const maxProfitDp = []

	const recursive = (profits, weights, capacity, currentIndex) => {
		if (currentIndex > profits.length - 1) return 0;
		if (capacity < 1) return 0;

		maxProfitDp[currentIndex] = maxProfitDp[currentIndex] || [];
		if (maxProfitDp[currentIndex][capacity] !== undefined) {
			return maxProfitDp[currentIndex][capacity];
		}

		const currentWeight = weights[currentIndex];
    	const currentProfit = profits[currentIndex];
    	let profitLeft = 0;
		if (currentWeight <= capacity) {
			profitLeft = currentProfit + recursive(profits, weights, capacity-currentWeight, currentIndex + 1);
		}
		const profitRight = recursive(profits, weights, capacity, currentIndex + 1);
		
    	maxProfitDp[currentIndex][capacity] = Math.max(profitLeft, profitRight);
		return maxProfitDp[currentIndex][capacity];
  	}
  
  	const result = recursive(profits, weights, capacity, 0);
  	return result;
};

Time and Space complexity#
Since our memoization array dp[profits.length][capacity+1] stores the results for all subproblems, we can conclude that we will not have more than N*C
subproblems (where ‘N’ is the number of items and ‘C’ is the knapsack capacity). 
This means that our time complexity will be O(N*C).

The above algorithm will use O(N*C)
space for the memoization array. Other than that, we will use O(N)
space for the recursion call-stack. So the total space complexity will be O(N*C + N)
which is asymptotically equivalent to O(N*C).


#3 Bottom up
let solveKnapsack = function(profits, weights, capacity) {
  const n = profits.length;

  const dp = Array(2).fill(0).map(() => Array(capacity+1).fill(0))
  console.log(dp)

  for (let c = 0; c <= capacity; c++) {
    if (weights[0] <= c) dp[0][c] = weights[0]
  }

  for (let i = 1; i < n; i++) {
    for (let c = 1; c <= capacity; c++) {
      let profit1 = 0;
      let profit2 = dp[(i-1)%2][c];
      if (weights[i] <= c) {
        profit1 = profits[i] + dp[(i-1)%2][c-weights[i]];
      }

      dp[i%2][c] = Math.max(profit1, profit2);
    }
  }

  console.log(dp)


  return dp[(n-1)%2][capacity];

};

var profits = [1, 6, 10, 16];
var weights = [1, 2, 3, 5];
console.log(`Total knapsack profit: ---> ${solveKnapsack(profits, weights, 7)}`);
console.log(`Total knapsack profit: ---> ${solveKnapsack(profits, weights, 6)}`);

The solution above is similar to the previous solution; the only difference is that we use i%2 instead of i and (i-1)%2 instead of i-1. 
This solution has a space complexity of O(2*C) = O(C), where ‘C’ is the knapsack’s maximum capacity.
