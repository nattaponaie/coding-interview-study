Problem Statement#
Given two integer arrays to represent weights and profits of ‘N’ items, 
we need to find a subset of these items which will give us maximum profit such that their cumulative weight is not more than a given number ‘C.’ 
Each item can only be selected once, which means either we put an item in the knapsack or we skip it.


let solveKnapsack = function(profits, weights, capacity) {
	if (profits.length !== weights.length) return 0;

	const recursive = (profits, weights, capacity, currentIndex) => {
		// 0,1
		if (currentIndex >= profits.length - 1) return 0;
		// 7,6
		if (capacity < 1) return 0;

		// 1,2
		const currentWeight = weights[currentIndex];
		// 6,4
		const currentCapacity = capacity-currentWeight;
		if (currentCapacity < 0) return 0;
		
		// 1.6
		const currentProfit = profits[currentIndex];
		const profitLeft = currentProfit + recursive(profits,weights, currentCapacity, currentIndex + 1);
		const profitRight = recursive(profits,weights, capacity, currentIndex + 1);
		return Math.max(profitLeft, profitRight);
    }
    return recursive(profits, weights, capacity, 0);
};


var profits = [1, 6, 10, 16];
var weights = [1, 2, 3, 5];
console.log(`Total knapsack profit: ---> ${solveKnapsack(profits, weights, 7)}`);
console.log(`Total knapsack profit: ---> ${solveKnapsack(profits, weights, 6)}`);

Time complexity
The above algorithm’s time complexity is exponential O(2^n), where ‘n’ represents the total number of items. 
This can also be confirmed from the above recursion tree. 
As we can see, we will have a total of ‘31’ recursive calls – calculated through (2^n) + (2^n) - 1
, which is asymptotically equivalent to O(2^n).

Space complexity
The space complexity is O(n). This space will be used to store the recursion stack. 
Since the recursive algorithm works in a depth-first fashion, 
which means that we can’t have more than ‘n’ recursive calls on the call stack at any time.


#2 Optimize by adding memoization
let solveKnapsack = function(profits, weights, capacity) {
	if (profits.length !== weights.length) return 0;
	const maxProfitDp = []

	const recursive = (profits, weights, capacity, currentIndex) => {
		if (currentIndex > profits.length - 1) return 0;
		if (capacity < 1) return 0;
		
		maxProfitDp[currentIndex] = maxProfitDp[currentIndex] || [];
		if (maxProfitDp[currentIndex][capacity] !== undefined) {
			return maxProfitDp[currentIndex][capacity];
		}

		const currentWeight = weights[currentIndex];
		const currentCapacity = capacity-currentWeight;
		if (currentCapacity < 0) return 0;
		
		const currentProfit = profits[currentIndex];
		const profitLeft = currentProfit + recursive(profits,weights, currentCapacity, currentIndex + 1);
		const profitRight = recursive(profits,weights, capacity, currentIndex + 1);
		maxProfitDp[currentIndex][capacity] = Math.max(profitLeft, profitRight);
		return maxProfitDp[currentIndex][capacity];
	}
	return recursive(profits, weights, capacity, 0);
};