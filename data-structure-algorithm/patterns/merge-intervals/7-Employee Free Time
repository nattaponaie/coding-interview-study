Employee Free Time (hard)#
For ‘K’ employees, we are given a list of intervals representing the working hours of each employee. Our goal is to find out if there is a free interval that is common to all employees. You can assume that each list of employee working hours is sorted on the start time.

Example 1:
Input: Employee Working Hours=[[[1,3], [5,6]], [[2,3], [6,8]]]
Output: [3,5]
Explanation: Both the employees are free between [3,5].

Example 2:
Input: Employee Working Hours=[[[1,3], [9,12]], [[2,4]], [[6,8]]]
Output: [4,6], [8,9]
Explanation: All employees are free between [4,6] and [8,9].

Example 3:
Input: Employee Working Hours=[[[1,3]], [[2,4]], [[3,5], [7,9]]]
Output: [5,7]
Explanation: All employees are free between [5,7].

[[[1,3], [9,12]], [[2,4]], [[6,8]]]
[[1,3], [2,4], [6,8], [9,12]]

[[[1,3]], [[2,4]], [[3,5], [7,9]]]
[[1,3], [2,4], [3,5], [7,9]]

class Interval {
    constructor(start, end) {
        this.start = start;
        this.end = end;
    }

    get_interval() {
        return "[" + this.start + ", " + this.end + "]";
    }
};

const find_employee_free_time = function(schedule) {
    result = [];
    const workingHours = [];
    for (const blocks of schedule) {
        for (const block of blocks) {
            workingHours.push(block);    
        }
    }

    workingHours.sort((a,b) => a.start - b.start);

    let start = workingHours[0].start;
    let end = workingHours[0].end;
    const freetimeSlot = [];
    for (let index = 1; index < workingHours.length; index++) {
        const currentInterval = workingHours[index];
        if (currentInterval.start <= end) {
            end = Math.max(end, currentInterval.end);
            continue;
        }
        freetimeSlot.push(new Interval(start, end))
        start = currentInterval.start;
        end = currentInterval.end;
    }
    freetimeSlot.push(new Interval(start, end))

    start = -1, end = -1;
    for (const slot of freetimeSlot) {
        if (start === -1) start = slot.start
        else if (end === -1) end = slot.end;
        if (start !== -1 && end !== -1) {
            result.push(new Interval(start, end));
            start = slot.start;
            end = -1;
        }
    }
    if (start !== -1 && end !== -1) result.push(new Interval(start, end));

    return result;
};

Time complexity: O(N * logN)
Space complexity: O(N)

input = [[new Interval(1, 3), new Interval(5, 6)], [
    new Interval(2, 3), new Interval(6, 8)]];
intervals = find_employee_free_time(input)
result = "Free intervals: ";
for(i=0; i < intervals.length; i++)
  result += intervals[i].get_interval();
console.log(result);

[[[1,3], [9,12]], [[2,4]], [[6,8]]]
workingHours = [[1,3], [2,4], [6,8], [9,12]]
start = 1, end = 3, index = 1
	start = 1, end = 4, index = 1
start = 1, end = 4, index = 2
	start = 1, end = 4, index = 2, result = [[1,4]]
	start = 6, end = 8, index = 2, result = [[1,4]]
start = 6, end = 8, index = 3, result = [[1,4]]
	start = 6, end = 8, index = 3, result = [[1,4]]
	start = 6, end = 8, index = 3, result = [[1,4],[6,8]]
	start = 9, end = 12, index = 3, result = [[1,4],[6,8]]
start = 9, end = 12, index = 3, result = [[1,4],[6,8]]
result = [[1,4],[6,8],[9,12]]
