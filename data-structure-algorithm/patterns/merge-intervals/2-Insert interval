Problem Statement #
Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.

Example 1:
Input: Intervals=[[1,3], [5,7], [8,12]], New Interval=[4,6]
Output: [[1,3], [4,7], [8,12]]
Explanation: After insertion, since [4,6] overlaps with [5,7], we merged them into one [4,7].

Example 2:
Input: Intervals=[[1,3], [5,7], [8,12]], New Interval=[4,10]
Output: [[1,3], [4,12]]
Explanation: After insertion, since [4,10] overlaps with [5,7] & [8,12], we merged them into [4,12].

Example 3:
Input: Intervals=[[2,3],[5,7]], New Interval=[1,4]
Output: [[1,4], [5,7]]
Explanation: After insertion, since [1,4] overlaps with [2,3], we merged them into one [1,4].



# 1 Approach
  let start = intervals[0].start;
  let end = intervals[0].end;
  const result = [];
  let isInserted = false;

  for (let i = 1; i < intervals.length; i++) {
    if (!isInserted && new_interval.start < end) {
      start = Math.min(start, new_interval.start);
      end = Math.max(end, new_interval.end);
      isInserted = true;
      if (i < intervals.length-1) continue;
    } 
    if (intervals[i].start < end) {
      start = Math.min(start, intervals[i].start);
      end = Math.max(end, intervals[i].end);
      if (i < intervals.length-1) continue;
    }
    result.push(new Interval(start, end));
    start = intervals[i].start;
    end = intervals[i].end;
  }

  if (start > result[result.length - 1].end) {
    result.push(new Interval(start, end));
  }
  return result;

Time complexity: O(N)
Space complexity: O(N)
		

