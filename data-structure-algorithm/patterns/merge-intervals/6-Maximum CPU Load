Maximum CPU Load (hard)#
We are given a list of Jobs. Each job has a Start time, an End time, and a CPU load when it is running. Our goal is to find the maximum CPU load at any time if all the jobs are running on the same machine.

Example 1:
Jobs: [[1,4,3], [2,5,4], [7,9,6]]
Output: 7
Explanation: Since [1,4,3] and [2,5,4] overlap, their maximum CPU load (3+4=7) will be when both the 
jobs are running at the same time i.e., during the time interval (2,4).

Example 2:
Jobs: [[6,7,10], [2,4,11], [8,12,15]]
Output: 15
Explanation: None of the jobs overlap, therefore we will take the maximum load of any job which is 15.

Example 3:
Jobs: [[1,4,2], [2,4,1], [3,6,5]]
Output: 8
Explanation: Maximum CPU load will be 8 as all jobs overlap during the time interval [3,4]. 

class Job {
  constructor(start, end, cpu_load) {
    this.start = start;
    this.end = end;
    this.cpu_load = cpu_load;
  }
};

const find_max_cpu_load = function(jobs) {
	jobs.sort((a,b) => a.start - b.start); // O(N * logN) time, O(N) space

	let maximumCpu = 0;
	
	const minHeap = new Heap([], null, (a,b) => b.end - a.end);
	minHeap.push(jobs[0]); // O(logN) time

	for (let index = 1; index < jobs.length; index++) { // O(N) time
		const currentJob = jobs[index];
		if (currentJob.start < minHeap.peek().end) {
            minHeap.push(currentJob); // O(logN) time
        }
        maximumCpu = Math.max(maximumCpu, currentJob.cpu_load);
    }

    if (minHeap.length === 1) return maximumCpu;

    let cpu = 0;
    for (const job of minHeap.toArray()) { // O(N) time
        cpu += job.cpu_load;
    }

    return cpu;
};

Time complexity: Firstly, we need to sort the N jobs array by its start time. This will take O(N * logN) time.
Secondly, we iterates through N jobs array and there is possibility that it could push job to minHeap when there is an overlap. 
This will take O(N * logN).
Lastly, we iterates through minHeap to count CPU that all jobs were using which will take O(N) time.
Therefore, this algorithm asymptotically equivalent to O(N * logN) time.

Space complexity: O(N) for sorting N jobs array + O(N) for storing all job in the minHeap for worst case.
Therefore, it will be asymptotically equivalent to O(N) space.