Problem Statement#
Given a set with distinct elements, find all of its distinct subsets.

Example 1:
Input: [1, 3]
Output: [], [1], [3], [1,3]

Example 2:
Input: [1, 5, 3]
Output: [], [1], [5], [3], [1,5], [1,3], [5,3], [1,5,3]

const find_subsets = function(nums) {
    subsets = [];
    subsets.push([]);

    for (let i = 0; i < nums.length; i++) {
        const subSetLength = subsets.length;
        for (let j = 0; j < subSetLength; j++) {
            const copySubset = [...subsets[j]];
            copySubset.push(nums[i]);
            subsets.push([copySubset]);
        }
    }

    return subsets;
};

#1 subsets = [[]], i = 0, j = 0
	#1 subsets = [[]], i = 0, j = 0, subSetLength = 1, copySubset = []
	#1 subsets = [[]], i = 0, j = 0, subSetLength = 1, copySubset = [1]
	#1 subsets = [[], [1]], i = 0, j = 0, subSetLength = 1, copySubset = [1]
#2 subsets = [[], [1]], i = 1, j = 0, subSetLength = 2, copySubset = []
	#2 subsets = [[], [1]], i = 1, j = 0, subSetLength = 2, copySubset = []
	#2 subsets = [[], [1], [3]], i = 1, j = 0, subSetLength = 2, copySubset = [3]

	#2 subsets = [[], [1], [3]], i = 1, j = 1, subSetLength = 2, copySubset = [1]
	#2 subsets = [[], [1], [3]], i = 1, j = 1, subSetLength = 2, copySubset = [1,3]
	#2 subsets = [[], [1], [3], [1,3]], i = 1, j = 1, subSetLength = 2, copySubset = [1,3]



Time complexity#
Since, in each step, the number of subsets doubles as we add each element to all the existing subsets, therefore, we will have a total of O(2^N)
O(2N) subsets, where ‘N’ is the total number of elements in the input set. And since we construct a new subset from an existing set, therefore, the time complexity of the above algorithm will be O(N*2^N)

Space complexity#
All the additional space used by our algorithm is for the output list. Since we will have a total of O(2^N)O(2​N) subsets, and each subset can take up to O(N)
O(N) space, therefore, the space complexity of our algorithm will be O(N*2^N).

