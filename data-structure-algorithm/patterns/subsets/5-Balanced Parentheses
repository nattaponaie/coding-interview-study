Problem Statement#
For a given number ‘N’, write a function to generate all combinations of ‘N’ pairs of balanced parentheses.

Example 1:
Input: N=2
Output: (()), ()()

Example 2:
Input: N=3
Output: ((())), (()()), (())(), ()(()), ()()()


class BalanceParenthesesNode {
	constructor(str, openCount, closeCount) {
		this.str = str;
		this.openCount = openCount;
		this.closeCount = closeCount;
    }   
}

const generate_valid_parentheses = function(num) {
    result = [];

    const queue = [];
    queue.push(new BalanceParenthesesNode('', 0, 0));

    while (queue.length > 0) {
        const currentNode = queue.shift();
        if (currentNode.openCount === num && currentNode.closeCount === num) {
            result.push(currentNode.str);
        } else {
            if (currentNode.openCount < num) {
                const newNode = new BalanceParenthesesNode(
                    `${currentNode.str}(`,
                    currentNode.openCount + 1,
                    currentNode.closeCount
                )
                queue.push(newNode);
            }

            if (currentNode.openCount > currentNode.closeCount) {
                const newNode = new BalanceParenthesesNode(
                    `${currentNode.str})`,
                    currentNode.openCount,
                    currentNode.closeCount + 1
                )
                queue.push(newNode);
            }
        }
    }

    return result;
};



console.log(`All combinations of balanced parentheses are: ${generate_valid_parentheses(2)}`)
// All combinations of balanced parentheses are: (()),()()
console.log(`All combinations of balanced parentheses are: ${generate_valid_parentheses(3)}`)
// All combinations of balanced parentheses are: ((())),(()()),(())(),()(()),()()()


Time complexity#
Let’s try to estimate how many combinations we can have for ‘N’ pairs of balanced parentheses. 
If we don’t care for the ordering - that ) can only come after ( - then we have two options for every position, i.e., either put open parentheses or close parentheses. 
This means we can have a maximum of 2^N combinations. Because of the ordering, the actual number will be less than 2^N.

If you see the visual representation of Example-2 closely you will realize that, in the worst case, 
it is equivalent to a binary tree, where each node will have two children. This means that we will have 2^N leaf nodes 
and 2^N-1 intermediate nodes. So the total number of elements pushed to the queue will be 2^N + 2^N-1,
which is asymptotically equivalent to O(2^N). 
While processing each element, we do need to concatenate the current string with ( or ). This operation will take O(N), 
so the overall time complexity of our algorithm will be O(N*2^N). 
This is not completely accurate but reasonable enough to be presented in the interview.

The actual time complexity ( O(4^n/\sqrt{n})) is bounded by the Catalan number and is beyond the scope of a coding interview. See more details here.

Space complexity#
All the additional space used by our algorithm is for the output list. Since we can’t have more than O(2^N) combinations, 
the space complexity of our algorithm is O(N*2^N).
