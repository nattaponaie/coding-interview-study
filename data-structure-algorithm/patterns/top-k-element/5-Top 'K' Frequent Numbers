Problem Statement#
Given an unsorted array of numbers, find the top ‘K’ frequently occurring numbers in it.

Example 1:
Input: [1, 3, 5, 12, 11, 12, 11], K = 2
Output: [12, 11]
Explanation: Both '11' and '12' appeared twice.

Example 2:
Input: [5, 12, 11, 3, 11], K = 2
Output: [11, 5] or [11, 12] or [11, 3]
Explanation: Only '11' appeared twice, all other numbers appeared once.

what if a given top K frequently does not exist in the input?
If the number of results is less than a given top K frequently?
	return any pair instead

const Heap = require('./collections/heap');
class Num {
	constructor(num, frequency) {
    this.num = num;
    this.frequency = frequency;
  }
}

const find_k_frequent_numbers = function(nums, k) {
	const frequencyHashmap = {};

	for (const num of nums) {
		if (num in frequencyHashmap) {
      frequencyHashmap[num] += 1;
    } else {
      frequencyHashmap[num] = 1;
    }
  }

  const minHeap = new Heap([], null, (a,b) => b.frequency - a.frequency);

  for (const [key, value] of Object.entries(frequencyHashmap)) {
    minHeap.push(new Num(key, value));
    if (minHeap.length > k) {
      minHeap.pop();
    }
  };


  const result = [];
  while (minHeap.length > 0) {
    const element = minHeap.pop();
    result.push(element.num);
  }

  return result;
};


console.log(`Here are the K frequent numbers: ${find_k_frequent_numbers([1, 3, 5, 12, 11, 12, 11], 2)}`)
console.log(`Here are the K frequent numbers: ${find_k_frequent_numbers([5, 12, 11, 3, 11], 2)}`)



Input: [5, 12, 11, 3, 11], K = 2
Output: [11, 5] or [11, 12] or [11, 3]

frequencyHashmap = {5:1,12:1,11:2,3:1}
#1 minHeap = []
	#1 minHeap = [{5:1}]
#2 minHeap = [{5:1}]
	#2 minHeap = [{5:1},12:1]
#3 minHeap = [{5:1},12:1]
	#3 minHeap = [{5:1},{12:1},{11:2}] // heap length > k
	#3 minHeap = [{12:1},{11:2}] 
#4 minHeap = [{12:1},{11:2}] 
	#4 minHeap = [{12:1},{11:2},{3:1}] // heap length > k
	#4 minHeap = [{11:2},{3:1}] 

return result = [11,3]

Time complexity: This first part will take O(N) time as we need to store frequency of each number from input.
We also iterate through hashmap that has N size and also insert it to the Heap.
However, we also store element to Heap at K size as we will always pop it out if the size exceeds K.
Therefore, this algorithm will take O(N + N * logK)

Space complexity: It will be O(N), as we need to store total N number to Hashmap
