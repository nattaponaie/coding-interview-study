
Problem Statement#
Given an array of points in a 2D plane, find ‘K’ closest points to the origin.

Example 1:
Input: points = [[1,2],[1,3]], K = 1
Output: [[1,2]]
Explanation: The Euclidean distance between (1, 2) and the origin is sqrt(5).
The Euclidean distance between (1, 3) and the origin is sqrt(10).
Since sqrt(5) < sqrt(10), therefore (1, 2) is closer to the origin.

Example 2:
Input: point = [[1, 3], [3, 4], [2, -1]], K = 2
Output: [[1, 3], [2, -1]]


Euclidean distance formular = sqrt(x^2 + y^2)


const Heap = require('./collections/heap'); 
class Point {

    constructor(x, y) {
        this.x = x;
        this.y = y;
    }

    compare(b) {
        return this.calculateDistance() - b.calculateDistance();
    }

    calculateDistance() {
        return (this.x * this.x) + (this.y * this.y);
    }

    get_point() {
        return "[" + this.x + ", " + this.y + "] ";
    }
};

const find_closest_points = function(points, k) {
	const maxHeap = new Heap([], null, (a,b) => a.compare(b));

	for (let i = 0; i < k; i++) {
		const currentPoint = points[i];
		maxHeap.push(currentPoint);
    }

	for (let i = k; i < points.length; i++) {
		const currentPoint = points[i];
		const currentDistance = currentPoint.calculateDistance();
		const maxDistance = maxHeap.peek().calculateDistance();

		if (currentDistance < maxDistance) {
			maxHeap.pop();
			maxHeap.push(currentPoint);
        }
    }

    return maxHeap.toArray();
};

Time complexity: O(N * logK)
Space complexity: O(1)