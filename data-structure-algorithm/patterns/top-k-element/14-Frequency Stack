Frequency Stack (hard)#
Design a class that simulates a Stack data structure, implementing the following two operations:

push(int num): Pushes the number ‘num’ on the stack.
pop(): Returns the most frequent number in the stack. If there is a tie, return the number which was pushed later.
Example:

After following push operations: push(1), push(2), push(3), push(2), push(1), push(2), push(5)

1. pop() should return 2, as it is the most frequent number
2. Next pop() should return 1
3. Next pop() should return 2

const Heap = require('./collections/heap');
class NumberFrequency {
	constructor(num, frequency, sequence) {
		this.num = num;
		this.frequency = frequency;
		this.sequence = sequence;
	}

	compare(b) {
		if (this.frequency !== b.frequency) {
			return this.frequency - b.frequency;
		}
		return this.sequence - b.sequence;
	}
}

class FrequencyStack {
	constructor() {
		this.maxHeap = new Heap([], null, (a,b) => a.compare(b)); // O(N) space
		this.frequencyMap = {}
		this.sequenceNumber = 0;
	}
	push(num) { // O(logN) time
		if (num in this.frequencyMap) {
			this.frequencyMap[num] += 1;
		} else this.frequencyMap[num] = 1;

		this.maxHeap.push(new NumberFrequency(num, this.frequencyMap[num], this.sequenceNumber)) // O(logN) time
		this.sequenceNumber += 1;
	}

	pop() { // O(logN) time
		const maxFrequency = this.maxHeap.pop(); // O(logN) time
		const num = maxFrequency.num;

		if (num in this.frequencyMap) {
			this.frequencyMap[num] -= 1;
		}
		if (this.frequencyMap[num] < 1) delete this.frequencyMap[num];

		return num;
	}
};

Time complexity: O(logN)
Space complexity: O(N)

var frequencyStack = new FrequencyStack()
frequencyStack.push(1)
frequencyStack.push(2)
frequencyStack.push(3)
frequencyStack.push(2)
frequencyStack.push(1)
frequencyStack.push(2)
frequencyStack.push(5)
console.log(frequencyStack.maxHeap.toArray())
console.log(frequencyStack.pop());
console.log(frequencyStack.pop());
console.log(frequencyStack.pop());
console.log(frequencyStack.pop());
console.log(frequencyStack.pop());
console.log(frequencyStack.pop());
console.log(frequencyStack.pop());
console.log(frequencyStack.pop());
