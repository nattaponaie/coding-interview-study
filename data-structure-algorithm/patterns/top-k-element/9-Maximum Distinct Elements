Problem Statement#
Given an array of numbers and a number ‘K’, we need to remove ‘K’ numbers from the array such that we are left with maximum distinct numbers.

Example 1:
Input: [7, 3, 5, 8, 5, 3, 3], and K=2
Output: 3
Explanation: We can remove two occurrences of 3 to be left with 3 distinct numbers [7, 3, 8], we have to skip 5 because it is not distinct and appeared twice. 

Another solution could be to remove one instance of '5' and '3' each to be left with three distinct numbers [7, 5, 8], in this case, we have to skip 3 because it appeared twice.

Example 2:
Input: [3, 5, 12, 11, 12], and K=3
Output: 2
Explanation: We can remove one occurrence of 12, after which all numbers will become distinct. Then we can delete any two numbers which will leave us 2 distinct numbers in the result.

Example 3:
Input: [1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5], and K=2
Output: 3
Explanation: We can remove one occurrence of '4' to get three distinct numbers.

class Number {
	constructor(num, frequency) {
		this.num = num;
		this.frequency = frequency;
	}
}

const find_maximum_distinct_elements = function(nums, k) {
	let distinctNumber = 0;

	// O(N) time, O(N) space
	const numberFrequencyHashmap = {}
	for (const num of nums) {
		if (num in numberFrequencyHashmap) {
			numberFrequencyHashmap[num] += 1
		} else {
			numberFrequencyHashmap[num] = 1
		}
	}

	const minHeap = new Heap([], null, (a,b) => b.frequency - a.frequency);
	// O(N * logK) time, O(K) space
	for ([key,value] of Object.entries(numberFrequencyHashmap)) {
		if (value === 1) distinctNumber += 1;
		else minHeap.push(new Number(key, value));
	}

	let remainingK = k;
	// O(K * logK) time
	while (minHeap.length > 0) {
		if (remainingK <  1) break;
		const number = minHeap.pop();
		remainingK -= number.frequency - 1;
		if (remainingK >= 0) distinctNumber += 1;
	}

	if (remainingK > 0) {
		distinctNumber -= remainingK;
	}

	return distinctNumber;
};

Time complexity#
Since we will insert all numbers in a HashMap and a Min Heap, this will take O(N*logN)
where ‘N’ is the total input number. While extracting numbers from the heap, in the worst case, we will need to take out ‘K’ numbers. 
This will happen when we have at least ‘K’ numbers with a frequency of two. Since the heap can have a maximum of ‘N/2’ numbers, 
therefore, extracting an element from the heap will take O(logN)
and extracting ‘K’ numbers will take O(KlogN)
So overall, the time complexity of our algorithm will be O(N*logN + KlogN).

We can optimize the above algorithm and only push ‘K’ elements in the heap, as in the worst case we will be extracting ‘K’ elements from the heap. 
This optimization will reduce the overall time complexity to O(N*logK + KlogK).

Space complexity#
The space complexity will be O(N)
 as, in the worst case, we need to store all the ‘N’ characters in the HashMap.


#1 {{7:1},{3:3},{5:2},{8:1}}

#1 key = 7, value = 1, distinctNumber = 0
	#1 key = 7, value = 1, distinctNumber = 1
#2 key = 3, value = 3, distinctNumber = 1
	#2 key = 3, value = 3, distinctNumber = 1, minHeap = [{3:3}]
#3 key = 5, value = 2, distinctNumber = 1, minHeap = [{3:3}]
	#3 key = 5, value = 2, distinctNumber = 1, minHeap = [{3:3},{5:2}]
#4 key = 8, value = 1, distinctNumber = 1, minHeap = [{3:3},{5:2}]
	#4 key = 8, value = 1, distinctNumber = 2, minHeap = [{3:3},{5:2}]
#5 key = 8, value = 1, distinctNumber = 2, minHeap = [{3:3},{5:2}]

#1 remainingK = 2, minHeap = [{3:3},{5:2}]
	#1 remainingK = 2, minHeap = [{5:2}], number = {3:3}
	#1 remainingK = 0, minHeap = [{5:2}], number = {3:3}, distinctNumber = 3

