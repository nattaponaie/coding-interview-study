K Pairs with Largest Sums (Hard)#
Given two sorted arrays in descending order, find ‘K’ pairs with the largest sum where each pair consists of numbers from both the arrays.

Example 1:

Input: L1=[9, 8, 2], L2=[6, 3, 1], K=3
Output: [9, 3], [9, 6], [8, 6] 
Explanation: These 3 pairs have the largest sum. No other pair has a sum larger than any of these.
Example 2:

Input: L1=[5, 2, 1], L2=[2, -1], K=3
Output: [5, 2], [5, -1], [2, 2] 

const Heap = require('./collections/heap'); 

class LargestNode {
	constructor(value1, value2, sum) {
		this.value1 = value1;
		this.value2 = value2;
		this.sum = sum;
  }
}

const find_k_largest_pairs = function(nums1, nums2, k) {
  const minHeap = new Heap([], null, (a,b) => b.sum - a.sum); // O(K) space

  for (let l1Index = 0; l1Index < Math.min(nums1.length, k); l1Index++) { // O(min(N,K) * min(M,K) * logK) time
    const l1Num = nums1[l1Index];
    for (let l2Index = 0; l2Index < Math.min(nums2.length, k); l2Index++) {
        const l2Num = nums2[l2Index];
        const sum = l1Num + l2Num;
        if (minHeap.length < k) {
          minHeap.push(new LargestNode(
            l1Num,
            l2Num,
            sum
          ))
        } else {
          const lowestSum = minHeap.peek();
          if (sum > lowestSum.sum) {
            minHeap.pop();
            minHeap.push(new LargestNode(
              l1Num,
              l2Num,
              sum
            ))
          }
      }
    }	
  }

  const result = [];
  for (const heapNode of minHeap.toArray()) {
    result.push([heapNode.value1, heapNode.value2])
  }
  return result;
};


console.log(`Pairs with largest sum are: ${find_k_largest_pairs([9, 8, 2], [6, 3, 1], 3)}`)
console.log(`Pairs with largest sum are: ${find_k_largest_pairs([5, 2, 1], [2, -1], 3)}`)

Time complexity: Since, at most we will go through every elements of 2 arrays. 
We will also add/remove element at most k elements to the minHeap.
This algorithm will be asymptotically equivalent to O(min(N,K) * min(M,K) * logK) where N is equal to the length of first array,
M is equal to the length of second array.

Space complexity: O(K), we will store at most K number to the minHeap
