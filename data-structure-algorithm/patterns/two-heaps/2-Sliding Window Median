Problem Statement #
Given an array of numbers and a number ‘k’, find the median of all the ‘k’ sized sub-arrays (or windows) of the array.

Example 1:

Input: nums=[1, 2, -1, 3, 5], k = 2
Output: [1.5, 0.5, 1.0, 4.0]
Explanation: Lets consider all windows of size ‘2’:

[1, 2, -1, 3, 5] -> median is 1.5
[1, 2, -1, 3, 5] -> median is 0.5
[1, 2, -1, 3, 5] -> median is 1.0
[1, 2, -1, 3, 5] -> median is 4.0
Example 2:

Input: nums=[1, 2, -1, 3, 5], k = 3
Output: [1.0, 2.0, 3.0]
Explanation: Lets consider all windows of size ‘3’:

[1, 2, -1, 3, 5] -> median is 1.0
[1, 2, -1, 3, 5] -> median is 2.0
[1, 2, -1, 3, 5] -> median is 3.0

const Heap = require('./collections/heap'); //http://www.collectionsjs.com
class SlidingWindowMedian {
	constructor() {
        this.maxHeap = new Heap([], null, ((a, b) => a - b));
        this.minHeap = new Heap([], null, ((a, b) => b - a));
    }

    find_sliding_window_median(nums, k) {
        result = [];

        let windowStart = 0;
        let kCount = 0;

        for (let windowEnd = 0; windowEnd < nums.length; windowEnd++) {
            const num = nums[windowEnd];
            if (this.maxHeap.length === 0) {
                this.maxHeap.push(num);
            } else if (this.maxHeap.length > 0 && this.minHeap.length === 0) {
                this.minHeap.push(num);
            } else {
                const minValue = this.maxHeap.peek();
                if (num > minValue) this.minHeap.push(num);
                else this.maxHeap.push(num);
            }

            if (this.minHeap.length > this.maxHeap.length) {
                const removedValue = this.minHeap.pop();
                this.maxHeap.push(removedValue);
            }

            kCount += 1;

            if (kCount === k) {
                result.push(this.get_median());
                this.maxHeap.delete(nums[windowStart]);
                this.minHeap.delete(nums[windowStart]);
                windowStart += 1;
                kCount -= 1;
            }
        }

        return result;
    }

    get_median() {
        if (this.minHeap.length === this.maxHeap.length) {
            return (this.minHeap.peek() + this.maxHeap.peek()) / 2;
        }
        return this.maxHeap.peek();
    }
};

Time complexity: 
    O(N) for iterating through all number in array
    O(logK) for push a number to heap
    O(K) for deleting value as we need to search through heap and delete it
    Overall, it will take O(N * K)
Space complexity: 
    (K) for storing all numbers in two heaps with sliding window size
