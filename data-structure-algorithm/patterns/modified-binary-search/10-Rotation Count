Rotation Count (medium)#
Given an array of numbers which is sorted in ascending order and is rotated ‘k’ times around a pivot, find ‘k’.

You can assume that the array does not have any duplicates.

Example 1:
Input: [10, 15, 1, 3, 8]
Output: 2
Explanation: The array has been rotated 2 times.

Example 2:
Input: [4, 5, 7, 9, 10, -1, 2]
Output: 5
Explanation: The array has been rotated 5 times.

Example 3:
Input: [1, 3, 8, 10]
Output: 0
Explanation: The array has been not been rotated.


const count_rotations = function(arr) {
	const lastArrIdx = arr.length - 1;
	let start = 0, end = lastArrIdx;
	while (start < end) {
		const middleIdx = Math.floor(start + (end - start) / 2);
		const middleNum = arr[middleIdx];
		if (start === middleIdx) break;
		if (arr[start] <= middleNum) start = middleIdx;
		else end = middleIdx;
    }

    if (start === lastArrIdx) return 0;
    else if (arr[start] < arr[start + 1]) return 0;
    return start + 1;
}


console.log(count_rotations([10, 15, 1, 3, 8]))
console.log(count_rotations([4, 5, 7, 9, 10, -1, 2]))
console.log(count_rotations([1, 3, 8, 10]))
console.log(count_rotations([3, 3, 7, 3]))

Time complexity: O(logN)
Space complexity: O(1)