Problem Statement#
Given an array of numbers sorted in ascending order, find the range of a given number ‘key’. The range of the ‘key’ will be the first and last position of the ‘key’ in the array.

Write a function to return the range of the ‘key’. If the ‘key’ is not present return [-1, -1].

Example 1:
Input: [4, 6, 6, 6, 9], key = 6
Output: [1, 3]

Example 2:
Input: [1, 3, 8, 10, 15], key = 10
Output: [3, 3]

Example 3:
Input: [1, 3, 8, 10, 15], key = 12
Output: [-1, -1]

sorted array in ascending order
have duplicate number
if found only once return [idx,idx]
if not found return [-1,-1]

const find_range = function(arr, key) {
    result = [- 1, -1];

    const searchIdx = (isMinFinding) => {
        let start = 0;
        let end = arr.length - 1;
        let lastFoundIdx = -1;
        while(start <= end) {
            const middleIdx = Math.floor(start + (end-start) / 2);
            const middleNum = arr[middleIdx];
            if (middleNum === key) {
                if (isMinFinding) end = middleIdx - 1;
                else start = middleIdx + 1;
                lastFoundIdx = middleIdx;
            } 
            else if (middleNum < key) start = middleIdx + 1;
            else end = middleIdx - 1;
        }
        return lastFoundIdx
    }

    result[0] = searchIdx(true);
    if (result[0] !== -1) result[1] = searchIdx(false);

    return result;
};

Time complexity: In each iteration, the arr size will be reduced by half. So, the algorithm will be O(logN).
Space complexity: O(1) no any extra space needed

Input: [4, 6, 6, 6, 9], key = 6
Output: [1, 3]

minFinding
#1 start = 0, end = 4, lastFoundIdx = -1, middleIdx = 2, middleNum = 6
	#1 start = 0, end = 1, lastFoundIdx = 2, middleIdx = 2, middleNum = 6
#2 start = 0, end = 1, lastFoundIdx = 2, middleIdx = 0, middleNum = 4
	#2 start = 1, end = 1, lastFoundIdx = 2, middleIdx = 0, middleNum = 4
#3 start = 1, end = 1, lastFoundIdx = 2, middleIdx = 1, middleNum = 6
	#3 start = 1, end = 0, lastFoundIdx = 1, middleIdx = 1, middleNum = 6 // 1

maxFinding
#1 start = 0, end = 4, lastFoundIdx = -1, middleIdx = 2, middleNum = 6
	#1 start = 3, end = 4, lastFoundIdx = 2, middleIdx = 2, middleNum = 6
#2 start = 3, end = 4, lastFoundIdx = 2, middleIdx = 3, middleNum = 6
	#2 start = 4, end = 4, lastFoundIdx = 3, middleIdx = 3, middleNum = 6
#3 start = 4, end = 4, lastFoundIdx = 3, middleIdx = 4, middleNum = 9
	#3 start = 4, end = 3, lastFoundIdx = 3, middleIdx = 4, middleNum = 9 // 3

