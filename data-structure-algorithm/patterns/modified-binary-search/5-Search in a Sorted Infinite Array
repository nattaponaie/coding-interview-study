Problem Statement#
Given an infinite sorted array (or an array with unknown size), find if a given number ‘key’ is present in the array. Write a function to return the index of the ‘key’ if it is present in the array, otherwise return -1.

Since it is not possible to define an array with infinite (unknown) size, you will be provided with an interface ArrayReader to read elements of the array. ArrayReader.get(index) will return the number at index; if the array’s size is smaller than the index, it will return Integer.MAX_VALUE.

Example 1:
Input: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], key = 16
Output: 6
Explanation: The key is present at index '6' in the array.

Example 2:
Input: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], key = 11
Output: -1
Explanation: The key is not present in the array.

Example 3:
Input: [1, 3, 8, 10, 15], key = 15
Output: 4
Explanation: The key is present at index '4' in the array.

Example 4:
Input: [1, 3, 8, 10, 15], key = 200
Output: -1
Explanation: The key is not present in the array.


class ArrayReader {

  constructor(arr) {
    this.arr = arr;
  }

  get(index) {
    if (index >= this.arr.length)
      return Number.MAX_SAFE_INTEGER;
    return this.arr[index]
  }
};


const search_in_infinite_array = function(reader, key) {
	let length = 2;
    let start = 0;
    let end = length - 1;
    while (reader.get(end) < key) {
        length = length * 2;
        start = end + 1;
        end = end + length;
    }

    start = 0;
    while (start <= end) {
        const middleIdx = Math.floor(start + (end-start) / 2);
        const middleNum = reader.get(middleIdx);
        if (middleNum === key) return middleIdx;
        else if (middleNum < key) start = middleIdx + 1;
        else end = middleIdx - 1;
    }

    return -1;
};

Input: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], key = 16
Output: 6
#1 length = 2, start = 0, end = 1
	#1 length = 4, start = 2, end = 5
#2 length = 4, start = 2, end = 5
	#2 length = 8, start = 6, end = 13
#3 length = 8, start = 6, end = 13

#1 start = 0, end = 13, middleIdx = 6, middleNum = 16
	#1 start = 0, end = 13, middleIdx = 6, middleNum = 16 // return 6

Time complexity: As we double array size in the loop to find array size. So, it will take O(logN) for that one. And we apply binary search to find the index of the target key which we will reduce the array length by half every iteration. So, it will take O(logN) as well. Overall, this algorithm will take O(logN + logN) = O(logN)

Space complexity: O(1) as we do not need any extra space.
