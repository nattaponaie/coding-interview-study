Problem Statement#
Given an array of lowercase letters sorted in ascending order, find the smallest letter in the given array greater than a given ‘key’.

Assume the given array is a circular list, which means that the last letter is assumed to be connected with the first letter. This also means that the smallest letter in the given array is greater than the last letter of the array and is also the first letter of the array.

Write a function to return the next letter of the given ‘key’.

Example 1:
Input: ['a', 'c', 'f', 'h'], key = 'f'
Output: 'h'
Explanation: The smallest letter greater than 'f' is 'h' in the given array.

Example 2:
Input: ['a', 'c', 'f', 'h'], key = 'b'
Output: 'c'
Explanation: The smallest letter greater than 'b' is 'c'.

Example 3:
Input: ['a', 'c', 'f', 'h'], key = 'm'
Output: 'a'
Explanation: As the array is assumed to be circular, the smallest letter greater than 'm' is 'a'.

Example 4:
Input: ['a', 'c', 'f', 'h'], key = 'h'
Output: 'a'
Explanation: As the array is assumed to be circular, the smallest letter greater than 'h' is 'a'.


#1 if middleNum equal to key -> return end
#2 if startIdx equal to endIdx && endNum more than key -> return end
#3 if startIdx equal to endIdx && endNum less than key -> return 0
#4 if startIdx equal to endIdx && endNum equal to key -> return 0

Time complexity: Since we reduce they array by half at every iteration that means the time complexity of this code will be O(logN)
Space complexity: This algorithm runs in constant space O(1)

const search_next_letter = function(letters, key) {
    let start = 0;
    let end = letters.length - 1;
    while (start <= end) {
        const middleIdx = Math.floor((start + end) / 2);
        const middleNum = letters[middleIdx];
        const endNum = letters[end];

        if (middleNum === key) break;
        else if (start === letters.length - 1 && end === letters.length - 1 && endNum < key) {
            end = 0;
            break;
        }
        else if (start === letters.length - 1 && end === letters.length - 1 && endNum === key) {
            end = 0;
            break;
        }
        else if (start === end && endNum > key) break;
        else if (start === end && endNum < key) {
            end = end + 1;
            break;
        }
        else {
            if (middleNum > key) end = middleIdx - 1;
            else start = middleIdx + 1;
        }
    }

    return letters[end];
};

Input: ['a', 'c', 'f', 'h'], key = 'f'
Output: 'h'
#1 start = 0, end = 3, middleIdx = 1, middleNum = c, endNum = h
	#1 start = 2, end = 3, middleIdx = 1, middleNum = c, endNum = h
#2 start = 2, end = 3, middleIdx = 2, middleNum = f, endNum = h
	#2 start = 2, end = 3, middleIdx = 2, middleNum = f, endNum = h // break

Input: ['a', 'c', 'f', 'h'], key = 'b'
Output: 'c'
#1 start = 0, end = 3, middleIdx = 1, middleNum = c, endNum = h
	#1 start = 0, end = 0, middleIdx = 1, middleNum = c, endNum = h
#2 start = 0, end = 0, middleIdx = 1, middleNum = a, endNum = a
	#2 start = 0, end = 0, middleIdx = 1, middleNum = a, endNum = a
	#2 start = 0, end = 1, middleIdx = 1, middleNum = a, endNum = a // break;





Input: ['a', 'c', 'f', 'h'], key = 'm'
Output: 'a'
#1 start = 0, end = 3, middleIdx = 1, middleNum = c, endNum = h
	#1 start = 2, end = 3, middleIdx = 1, middleNum = c, endNum = h
#2 start = 2, end = 3, middleIdx = 2, middleNum = f, endNum = h
	#2 start = 3, end = 3, middleIdx = 2, middleNum = f, endNum = h
#3 start = 3, end = 3, middleIdx = 3, middleNum = h, endNum = h
	#3 start = 3, end = 0, middleIdx = 3, middleNum = h, endNum = h // break
