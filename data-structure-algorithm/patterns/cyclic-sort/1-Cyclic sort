Problem Statement#
We are given an array containing n objects. Each object, when created, was assigned a unique number from the range 1 to n based on their creation sequence. This means that the object with sequence number 3 was created just before the object with sequence number 4.

Write a function to sort the objects in-place on their creation sequence number in O(n)O(n) and without using any extra space. For simplicity, letâ€™s assume we are passed an integer array containing only the sequence numbers, though each number is actually an object.

Example 1:
Input: [3, 1, 5, 4, 2]
Output: [1, 2, 3, 4, 5]

Example 2:
Input: [2, 6, 4, 3, 1, 5]
Output: [1, 2, 3, 4, 5, 6]

Example 3:
Input: [1, 5, 6, 4, 3, 2]
Output: [1, 2, 3, 4, 5, 6]

#1 Approach
Cyclic sort

let currentIndex = 0;

while (currentIndex < nums.length) {
	const currentNum = nums[currentIndex];
    const currentNumIndex = currentNum - 1;	

	if (currentNumIndex !== currentIndex) {
		const clone = nums[currentIndex];
        nums[currentIndex] = nums[currentNumIndex];
        nums[currentNumIndex] = clone;
        continue;
    }
    currentIndex += 1;
}

Time complexity: O(N)
Space complexity: O(1)




Input: [3, 1, 5, 4, 2]
#1 currentIndex = 0, nums = [3, 1, 5, 4, 2]
	#1 currentIndex = 0, currentNum = 3, currentNumIndex = 2, nums = [5, 1, 3, 4, 2]
#2 currentIndex = 0, nums = [5, 1, 3, 4, 2]
	#2 currentIndex = 0, currentNum = 5, currentNumIndex = 4, nums = [2, 1, 3, 4, 5]
#3 currentIndex = 0, nums = [2, 1, 3, 4, 5]
	#3 currentIndex = 0, currentNum = 2, currentNumIndex = 1, nums = [1, 2, 3, 4, 5]
#4 currentIndex = 0, nums = [1, 2, 3, 4, 5]
	#4 currentIndex = 1, currentNum = 1, currentNumIndex = 0, nums = [1, 2, 3, 4, 5]
#5 currentIndex = 1, nums = [1, 2, 3, 4, 5]
	#5 currentIndex = 2, currentNum = 2, currentNumIndex = 1, nums = [1, 2, 3, 4, 5]
#6 currentIndex = 2, nums = [1, 2, 3, 4, 5]

	
