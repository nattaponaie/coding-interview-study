Find the First K Missing Positive Numbers (hard)#
Given an unsorted array containing numbers and a number ‘k’, find the first ‘k’ missing positive numbers in the array.

Example 1:
Input: [3, -1, 4, 5, 5], k=3
Output: [1, 2, 6]
Explanation: The smallest missing positive numbers are 1, 2 and 6.

Example 2:
Input: [2, 3, 4], k=3
Output: [1, 5, 6]
Explanation: The smallest missing positive numbers are 1, 5 and 6.

Example 3:
Input: [-2, -3, 4], k=2
Output: [1, 2]
Explanation: The smallest missing positive numbers are 1 and 2.

Input: [2, 3, 4], k=3
Output: [1, 5, 6]

[2i, 3, 4]
[3i, 2, 4]
[4i, 2, 3]
[4, 2i, 3]
[4, 2, 3i]

[4, 2, 3, 99, 99]
[4i, 2, 3, 99, 99]
	[99i, 2, 3, 4, 99]
[99, 2i, 3, 4, 99]
[99, 2, 3i, 4, 99]
[99, 2, 3, 4i, 99]
[99, 2, 3, 4, 99i]

const find_first_k_missing_positive = function(nums, k) {
    missingNumbers = [];

    let currentIndex = 0;
    while (currentIndex < nums.length) {
        const currentNum = nums[currentIndex];
        const itsPositionIndex = currentNum - 1;
        if (currentNum > 0 && itsPositionIndex < nums.length && currentNum !== nums[itsPositionIndex]) {
            [nums[currentIndex], nums[itsPositionIndex]] = [nums[itsPositionIndex], nums[currentIndex]];
            continue;
        }
        currentIndex += 1;
    }

    const additionalNumber = new Set();
    for (let currentIndex = 0; currentIndex < nums.length; currentIndex++) {
        if (missingNumbers.length >= k) break;
        const currentNum = nums[currentIndex];
        const expectNum = currentIndex + 1;
        if (currentNum !== expectNum) {
            missingNumbers.push(expectNum);
            additionalNumber.push(currentNum);
        }
    }

    currentIndex = 1;
    while (missingNumbers.length < k) {
        const newNumber = currentIndex + nums.length;
        if (additionalNumber.has(newNumber)) {
            currentIndex += 1;
        } else {
            missingNumbers.push(newNumber);
        }
    }

    return missingNumbers;
};

Time complexity: For sorting the nums array and the first finding missing number is taking O(N) time. Secondly, there is an additional loop with K times when missing numbers is less than K.
Therefore, this algorithm will be asymptotically equivalent to O(N + K)

Space complexity: O(K) for storing missing number in the additionalNumber 
