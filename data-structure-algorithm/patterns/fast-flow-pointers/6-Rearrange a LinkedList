Rearrange a LinkedList (medium)#
Given the head of a Singly LinkedList, write a method to modify the LinkedList such that the nodes from the second half of the LinkedList are inserted alternately to the nodes from the first half in reverse order. So if the LinkedList has nodes 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null, your method should return 1 -> 6 -> 2 -> 5 -> 3 -> 4 -> null.

Your algorithm should not use any extra space and the input LinkedList should be modified in-place.

Example 1:
Input: 2 -> 4 -> 6 -> 8 -> 10 -> 12 -> null
Output: 2 -> 12 -> 4 -> 10 -> 6 -> 8 -> null 

Example 2:
Input: 2 -> 4 -> 6 -> 8 -> 10 -> null
Output: 2 -> 10 -> 4 -> 8 -> 6 -> null

1 -> 2 -> 3 -> 4 -> null
1 -> 4 -> 2 -> 3 -> null

1 -> 2 -> 3 -> 4 -> null
mid = 3
reverse since mid 4 -> 3 -> null

first = 1, 2, 3
second = 4, 3, null
while second is not null
	cloneFirstNextNode = first.next // 2, 3
	cloneSecondNextNode = second.next // 3, null
	first.next = second
	second.next = cloneFirstNextNode

	first = cloneFirstNextNode
	second = cloneSecondNextNode

1 -> 4 -> 2 -> 3 -> null

class Node {
  constructor(value, next=null){
    this.value = value;
    this.next = next;
  }
  
  print_list() {
    result = "";
    temp = this;
    while (temp !== null) {
      result += temp.value + " ";
      temp = temp.next;
    }
    console.log(result);
  }
}


const reorder = function(head) {
	const findMiddleNode = () => {
		let slow = head, fast = head;
		while (fast !== null) {
			if (fast.next === null) break;
			slow = slow.next;
			fast = fast.next.next;
        }
        return slow;
    }

    const middleNode = findMiddleNode();

    const reverse = (headNode) => {
        let current = headNode, previous = null;
        while (current !== null) {
            const cloneNextNode = current.next;
            current.next = previous;
            previous = current;
            current = cloneNextNode;
        }
        return previous;
    }
    let first = head; // 2, 4, 6
    let second = reverse(middleNode); // 12, 10, null

    while (second !== null) {
        const cloneFirstNextNode = first.next; // 4, 6
        const cloneSecondNextNode = second.next; // 10, 8

        first.next = second;
        if (second.next === null) break;
        second.next = cloneFirstNextNode;
        
        first = cloneFirstNextNode;
        second = cloneSecondNextNode;
    }

    return head;
}



head = new Node(2)
head.next = new Node(4)
head.next.next = new Node(6)
head.next.next.next = new Node(8)
head.next.next.next.next = new Node(10)
reorder(head)
head.print_list()



Input: 2 -> 4 -> 6 -> 8 -> 10 -> 12 -> null
Output: 2 -> 12 -> 4 -> 10 -> 6 -> 8 -> null 

middleNode = 10
tail = 12
reverse	12 -> 10 -> 8
head		2 -> 4 -> 6

2 -> 12 -> 4 -> 10 -> 6
