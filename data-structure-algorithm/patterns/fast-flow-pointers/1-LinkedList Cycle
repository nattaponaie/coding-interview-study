Problem Statement#
Given the head of a Singly LinkedList, write a function to determine if the LinkedList has a cycle in it or not.

Example:  
Following LinkedList has a cycle:  
    2   
    4   
    6   
    8   
    10   

Following LinkedList doesn't have a cycle:  
    null   
    1   
    2   
    3   
    4   
    5   
    6   

class Node {
  constructor(value, next=null){
    this.value = value;
    this.next = next;
  }
}

const has_cycle = function(head) {
	let slowPointer = head;
	let fastPointer = head;

	while (fastPointer != null && fastPointer.next != null) {
    slowPointer = slowPointer.next;
    fastPointer = fastPointer.next.next;
		if (slowPointer === fastPointer) {
			return true;
    }
  }
  return false;
}



head = new Node(1)
head.next = new Node(2)
head.next.next = new Node(3)
head.next.next.next = new Node(4)
head.next.next.next.next = new Node(5)
head.next.next.next.next.next = new Node(6)
console.log(`LinkedList has cycle: ${has_cycle(head)}`)

head.next.next.next.next.next.next = head.next.next
console.log(`LinkedList has cycle: ${has_cycle(head)}`)

head.next.next.next.next.next.next = head.next.next.next
console.log(`LinkedList has cycle: ${has_cycle(head)}`)

