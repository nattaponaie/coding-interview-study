Problem Statement#
Given an array containing 0s, 1s and 2s, sort the array in-place. You should treat numbers of the array as objects, hence, we canâ€™t count 0s, 1s, and 2s to recreate the array.

The flag of the Netherlands consists of three colors: red, white and blue; and since our input array also consists of three different numbers that is why it is called Dutch National Flag problem.

Example 1:
Input: [1, 0, 2, 1, 0]
Output: [0, 0, 1, 1, 2]

Example 2:
Input: [2, 2, 0, 1, 2, 0]
Output: [0, 0, 1, 2, 2, 2,]

[0, 0, 1L, 1Ri, 2]
[0, 0, 1L, 1iR, 2]

[0, 0L, 1i, 2R, 2, 2]
[0, 1L, 0Ri, 2, 2, 2]


const dutch_flag_sort = function(arr) {
	let left = 0;
	let right = arr.length - 1;
	let i = 0;
	while (i < right) {
		const num = arr[i];
		if (num === 1) {
			i += 1;
        } else if (num === 0) {
            [arr[i], arr[left]] = [arr[left], arr[i]];
            left += 1;
            i += 1;
        } else if (num === 2) {
            [arr[i], arr[right]] = [arr[right], arr[i]];
            right -= 1;
        }
    }
    return arr;
};

Time complexity: As we iterate through arr array only once. Therefore, it will take O(N).
Space complexity: No extra space needed, it's O(1)
