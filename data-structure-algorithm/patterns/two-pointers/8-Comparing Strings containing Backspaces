Comparing Strings containing Backspaces (medium)#
Given two strings containing backspaces (identified by the character ‘#’), check if the two strings are equal.

Example 1:
Input: str1="xy#z", str2="xzz#"
Output: true
Explanation: After applying backspaces the strings become "xz" and "xz" respectively.

Example 2:
Input: str1="xy#z", str2="xyz#"
Output: false
Explanation: After applying backspaces the strings become "xz" and "xy" respectively.

Example 3:
Input: str1="xp#", str2="xyz##"
Output: true
Explanation: After applying backspaces the strings become "x" and "x" respectively.
In "xyz##", the first '#' removes the character 'z' and the second '#' removes the character 'y'.

Example 4:
Input: str1="xywrrmp", str2="xywrrmu#p"
Output: true
Explanation: After applying backspaces the strings become "xywrrmp" and "xywrrmp" respectively.

Input: str1="x^p#", str2="x^yz##"

Input: str1="xy#z^", str2="xy^z#"

Input: str1="xywrrm^p", str2="xywrrm^u#p"

const backspace_compare = function(str1, str2) {
let index1 = str1.length - 1;
let index2 = str2.length - 1;

const findNextCharIndex = (index, str) => {
	let backspaceCount = 0;
	while (index >= 0) {
		if (str[index] === '#') {
			backspaceCount += 1;
		} else if (backspaceCount > 0) {
			backspaceCount -= 1;
		} else break;
			index -= 1;
		}
		return index;
	}

	while (index1 >= 0 && index2 >= 0) { // O(N) time
		let nextIndex1 = findNextCharIndex(index1, str1);
		let nextIndex2 = findNextCharIndex(index2, str2);

		if (str1[nextIndex1] !== str2[nextIndex2]) return false;

		index1 = nextIndex1 - 1;
		index2 = nextIndex2 - 1;
	}

	return true;
};

Input: str1="xp#i1", str2="xyz##i2"
index1 = 2, index2 = 4
	backspaceCount = 0, index1 = 2
	backspaceCount = 1, index1 = 1
	backspaceCount = 0, index1 = 0
	backspaceCount = 0, index1 = 0 break

	backspaceCount = 0, index2 = 4
	backspaceCount = 1, index2 = 3
	backspaceCount = 2, index2 = 2
	backspaceCount = 1, index2 = 1
	backspaceCount = 0, index2 = 0
	backspaceCount = 0, index2 = 0 break
index1 = 0, index2 = 0


Time complexity#
The time complexity of the above algorithm will be O(M+N)
where ‘M’ and ‘N’ are the lengths of the two input strings respectively.

Space complexity#
The algorithm runs in constant space O(1).

