Quadruple Sum to Target (medium)#
Given an array of unsorted numbers and a target number, find all unique quadruplets in it, whose sum is equal to the target number.

Example 1:
Input: [4, 1, 2, -1, 1, -3], target=1
Output: [-3, -1, 1, 4], [-3, 1, 1, 2]
Explanation: Both the quadruplets add up to the target.

Example 2:
Input: [2, 0, -1, 1, -2, 2], target=2
Output: [-2, 0, 2, 2], [-1, 0, 1, 2]
Explanation: Both the quadruplets add up to the target.

A + B + C + D = target

[-3i,-1j,1,1,2,4]
	[-3i,-1j,1L,1,2,4R] -> -3 + -1 + 1 + 4 = target -> true, [-3,-1,1,4]
	[-3i,-1j,1,1L,2R,4] -> -3 + -1 + 1 + 2 = target -> false, [-3,-1,1,4]
	[-3i,-1j,1,1,2LR,4]
[-3i,-1,1j,1,2,4]
	[-3i,-1,1j,1L,2,4R] -> -3 + 1 + 1 + 4 = target -> false
	[-3i,-1,1j,1L,2,4R] -> -3 + 1 + 1 + 4 = target -> false


const search_quadruplets = function(arr, target) {
quadruplets = [];
arr.sort((a,b) => a - b); // O(N) time, O(N) space

    const searchPairs = (firstIndex, secondIndex) => { // O(N)
        let left = secondIndex + 1;
        let right = arr.length - 1;
        while (left < right) {
            const firstNum = arr[firstIndex];
            const secondNum = arr[secondIndex];
            const leftNum = arr[left];
            const rightNum = arr[right];
            const sum = firstNum + secondNum + leftNum + rightNum;
            if (sum === target) {
                quadruplets.push([firstNum, secondNum, leftNum, rightNum]);
                while (left < right && leftNum === arr[left + 1]) left += 1;
                while (left < right && rightNum === arr[right - 1]) right -= 1;
                left += 1;
                right -= 1;
            } else if (sum < target) left += 1;
            else right -= 1;
        }
    }

    for (let firstIndex = 0; firstIndex < arr.length; firstIndex ++) { // O(N)
        if (firstIndex > 0 && arr[firstIndex] === arr[firstIndex - 1]) continue;
        let nextIndex = firstIndex + 1;
        for (secondIndex = nextIndex; secondIndex < arr.length; secondIndex++) { // O(N)
            if (secondIndex > nextIndex && arr[secondIndex] === arr[secondIndex - 1]) continue;
            searchPairs(firstIndex, secondIndex);
        }
    }



    return quadruplets;
};


Time complexity#
Sorting the array will take O(N*logN)
Overall searchQuadruplets() will take O(N * logN + N^3), 
which is asymptotically equivalent to O(N^3).

Space complexity#
The space complexity of the above algorithm will be O(N)
which is required for sorting.

