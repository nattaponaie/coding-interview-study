Reverse alternating K-element Sub-list (medium)#
Given the head of a LinkedList and a number ‘k’, reverse every alternating ‘k’ sized sub-list starting from the head.

If, in the end, you are left with a sub-list with less than ‘k’ elements, reverse it too.

 Original List:  
 Example:  
 head  
 head  
    1   
    2   
    3   
    4   
    5   
    6   
    7   
    8   
    null   
 Reversed Sub-list:  
 k=2  
    2   
    1   
    3   
    4   
    6   
    5   
    7   
    8   
    null   

class Node {
  constructor(value, next=null){
    this.value = value;
    this.next = next;
  }

  get_list() {
    result = "";
    temp = this;
    while (temp !== null) {
      result += temp.value + " ";
      temp = temp.next;
    }
    return result;
  }
};

const reverse = (head, k) => {
	let previous = null, current = head, kCount = 0;
	while (current !== null) {
		kCount += 1;
		if (previous === null) {
			previous = current;
			current = current.next;
			continue;
        }
        const cloneNextNode = current.next;
        current.next = previous;

        if (kCount === k) {
            head.next = cloneNextNode;	
            break;
        }

        previous = current;
        current = cloneNextNode;
    }
    return current;
}

const reverse_alternate_k_elements = function(head, k) {
    let previous = null, current = head;
    let kCount = 2;
    while (current !== null) {
        if (kCount === k) {
            const reversed = reverse(current, k);
            if (previous !== null) {
                previous.next = reversed;
            } else head = reversed
            for (let i = 1; i <= k - 1; i++) {
                previous = current;
                current = current.next;
            }

            kCount = 0;
        }
        kCount += 1;
        previous = current;
        current = current.next;
    }

    return head;
};

Time complexity: O(N)
Space complexity: O(1)
