Minimum Height Trees (hard)#
We are given an undirected graph that has characteristics of a k-ary tree. In such a graph, 
we can choose any node as the root to make a k-ary tree. 
The root (or the tree) with the minimum height will be called Minimum Height Tree (MHT). 
There can be multiple MHTs for a graph. In this problem, we need to find all those roots which give us MHTs. 
Write a method to find all MHTs of the given graph and return a list of their roots.

Example 1:
Input: vertices: 5, Edges: [[0, 1], [1, 2], [1, 3], [2, 4]]
Output:[1, 2]
Explanation: Choosing '1' or '2' as roots give us MHTs. In the below diagram, we can see that the 
height of the trees with roots '1' or '2' is three which is minimum.

Example 2:
Input: vertices: 4, Edges: [[0, 1], [0, 2], [2, 3]]
Output:[0, 2]
Explanation: Choosing '0' or '2' as roots give us MHTs. In the below diagram, we can see that the 
height of the trees with roots '0' or '2' is three which is minimum.

Example 3:
Input: vertices: 4, Edges: [[0, 1], [1, 2], [1, 3]]
Output:[1]

const find_trees = function(nodes, edges) {
	const verticeWithNodeCount = {}; // O(V) space
	const graph = {}; // O(V + E) space

	for (const edge of edges) { // O(E) time
		const node1 = edge[0];
		const node2 = edge[1];

		if (!(node1 in graph)) graph[node1] = [];
		if (!(node2 in graph)) graph[node2] = [];
		graph[node1].push(node2);
		graph[node2].push(node1);

		if (!(node1 in verticeWithNodeCount)) verticeWithNodeCount[node1] = 0;
		if (!(node2 in verticeWithNodeCount)) verticeWithNodeCount[node2] = 0;
        verticeWithNodeCount[node1] += 1;
        verticeWithNodeCount[node2] += 1;
    }

    const leaves = [];
    for ([key,value] of Object.entries(verticeWithNodeCount)) { // O(V) time
        if (value === 1) {
            leaves.push(key);
        }
    }

    let totalNodes = nodes;
    while (totalNodes > 2) { // O(V + E) time
        const currentLeaveLength = leaves.length;
        totalNodes -= currentLeaveLength;
        for (let index = 0; index < currentLeaveLength; index++) {
            const leaf = leaves.shift();
            graph[leaf].forEach((child) => {
                verticeWithNodeCount[child] -= 1;
                if (verticeWithNodeCount[child] === 1) {
                    leaves.push(child);
                }
            })
        }
    }

    return leaves;
};

Time complexity: O(V+E)
Space complexity: O(V+E)

