Problem Statement#
There are ‘N’ tasks, labeled from ‘0’ to ‘N-1’. Each task can have some prerequisite tasks which need to be completed before it can be scheduled. Given the number of tasks and a list of prerequisite pairs, find out if it is possible to schedule all the tasks.

Example 1:
Input: Tasks=3, Prerequisites=[0, 1], [1, 2]
Output: true
Explanation: To execute task '1', task '0' needs to finish first. Similarly, task '1' needs 
to finish before '2' can be scheduled. One possible scheduling of tasks is: [0, 1, 2] 

Example 2:
Input: Tasks=3, Prerequisites=[0, 1], [1, 2], [2, 0]
Output: false
Explanation: The tasks have a cyclic dependency, therefore they cannot be scheduled.

Example 3:
Input: Tasks=6, Prerequisites=[2, 5], [0, 5], [0, 4], [1, 4], [3, 2], [1, 3]
Output: true
Explanation: A possible scheduling of tasks is: [0 1 4 3 2 5] 

Problem Statement#
There are ‘N’ tasks, labeled from ‘0’ to ‘N-1’. Each task can have some prerequisite tasks which need to be completed before it can be scheduled. Given the number of tasks and a list of prerequisite pairs, find out if it is possible to schedule all the tasks.

Example 1:
Input: Tasks=3, Prerequisites=[0, 1], [1, 2]
Output: true
Explanation: To execute task '1', task '0' needs to finish first. Similarly, task '1' needs 
to finish before '2' can be scheduled. One possible scheduling of tasks is: [0, 1, 2] 

Example 2:
Input: Tasks=3, Prerequisites=[0, 1], [1, 2], [2, 0]
Output: false
Explanation: The tasks have a cyclic dependency, therefore they cannot be scheduled.

Example 3:
Input: Tasks=6, Prerequisites=[2, 5], [0, 5], [0, 4], [1, 4], [3, 2], [1, 3]
Output: true
Explanation: A possible scheduling of tasks is: [0 1 4 3 2 5] 

const is_scheduling_possible = function(tasks, prerequisites) {
	const parentCountMap = Array(tasks).fill(0); // O(T) time, O(T) space
	// [0,0,0]
	// [0,1,1]
	const graph = Array(tasks).fill(0).map(() => []); // O(T) time, O(P) space
	// [[],[],[]]
	// [[1],[2],[]]

	for (let index = 0; index < prerequisites.length; index++) { // O(P) time
		const prerequisite = prerequisites[index]; // [0,1], [1,2]
		const parent = prerequisite[0]; // 0, 1
		const child = prerequisite[1]; // 1, 2

		graph[parent].push(child);
		parentCountMap[child] += 1;
    }

    const sources = []; // [0] - [1]
    for (let index = 0; index < parentCountMap.length; index++) { // O(T) time
        if (parentCountMap[index] === 0) {
            sources.push(index);
        }
    }

    const sortedOrders = [];

    while (sources.length > 0) { // O(T) time
        const vertice = sources.shift(); // 0
        sortedOrders.push(vertice); // 0

        graph[vertice].forEach((child) => { // O(P) time
            parentCountMap[child] -= 1;
            if (parentCountMap[child] === 0) sources.push(child)
        })
    }

    return sortedOrders.length === tasks;
};

Time complexity: in the sources while loop, we only visit each vertice only once 
and each vertice we also visit its edges only once as well.
Therefore, this algorithm will take O(T + P) time

Space complexity: O(T + P) space since it store edges for each vertice
