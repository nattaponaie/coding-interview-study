Problem Statement#
Topological Sort of a directed graph (a graph with unidirectional edges) is a linear ordering of its vertices such that for every directed edge (U, V) from vertex U to vertex V, U comes before V in the ordering.

Given a directed graph, find the topological ordering of its vertices.

Example 1:
Input: Vertices=4, Edges=[3, 2], [3, 0], [2, 0], [2, 1]
Output: Following are the two valid topological sorts for the given graph:
1) 3, 2, 0, 1
2) 3, 2, 1, 0

Example 2:
Input: Vertices=5, Edges=[4, 2], [4, 3], [2, 0], [2, 1], [3, 1]
Output: Following are all valid topological sorts for the given graph:
1) 4, 2, 3, 0, 1
2) 4, 3, 2, 0, 1
3) 4, 3, 2, 1, 0
4) 4, 2, 3, 1, 0
5) 4, 2, 0, 3, 1

Example 3:
Input: Vertices=7, Edges=[6, 4], [6, 2], [5, 3], [5, 4], [3, 0], [3, 1], [3, 2], [4, 1]
Output: Following are all valid topological sorts for the given graph:
1) 5, 6, 3, 4, 0, 1, 2
2) 6, 5, 3, 4, 0, 1, 2
3) 5, 6, 4, 3, 0, 2, 1
4) 6, 5, 4, 3, 0, 1, 2
5) 5, 6, 3, 4, 0, 2, 1
6) 5, 6, 3, 4, 1, 2, 0

There are other valid topological ordering of the graph too.

const topological_sort = function(vertices, edges) {
  sortedOrder = [];
  const inDegrees = Array(vertices).fill(0); // O(V) time, O(V) space
  const graph = Array(vertices).fill(0).map(() => []); // O(V) time, O(V+E) space

  for (let index = 0; index < edges.length; index++) { // O(E) time
    const edge = edges[index];
    const vertice = edge[0]
    const child = edge[1]
    graph[vertice].push(child);
    inDegrees[child] += 1;
  }

  const sources = [];
  for (let index = 0; index < inDegrees.length; index++) { // O(V) time
    if (inDegrees[index] === 0) sources.push(index);
  }

  if (sources.length === 0) return sortedOrder;

  while (sources.length > 0) { // O(V) time
    const vertice = sources.shift();
    sortedOrder.push(vertice);
    for (child of graph[vertice]) { // O(E) time
      inDegrees[child] -= 1;
      if (inDegrees[child] === 0) sources.push(child);
    }
  }

  if (sortedOrder.length !== vertices) return [];
  
  return sortedOrder;
  // Topological sort: 3,2,0,1
  // Topological sort: 4,2,3,0,1
  // Topological sort: 5,6,3,4,0,2,1
};


console.log(`Topological sort: ${topological_sort(4, [[3, 2], [3, 0], [2, 0], [2, 1]])}`)
console.log(`Topological sort: ${topological_sort(5, [[4, 2], [4, 3], [2, 0], [2, 1], [3, 1]])}`)
console.log(`Topological sort: ${topological_sort(7, [[6, 4], [6, 2], [5, 3], [5, 4], [3, 0], [3, 1], [3, 2], [4, 1]])}`)


Time Complexity#
In step ‘d’, each vertex will become a source only once and each edge will be accessed and removed once. 
Therefore, the time complexity of the above algorithm will be O(V+E), 
where ‘V’ is the total number of vertices and ‘E’ is the total number of edges in the graph.

Space Complexity#
The space complexity will be O(V+E), since we are storing all of the edges for each vertex in an adjacency list.